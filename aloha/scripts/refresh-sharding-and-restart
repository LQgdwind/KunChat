#!/usr/bin/env bash

set -e

# Stand up the new aloha-tornado supervisor instances, and write out
# the newly generated config files, with .tmp suffix
SUPPRESS_SHARDING_NOTICE=1 "$(dirname "$0")/aloha-puppet-apply" -f

# Verify, before we move them into place
if ! [ -e /etc/aloha/nginx_sharding_map.conf.tmp ] || ! [ -e /etc/aloha/sharding.json.tmp ]; then
    echo "No sharding updates found to apply."
    exit 1
fi

chown root:root /etc/aloha/nginx_sharding_map.conf.tmp
chmod 644 /etc/aloha/nginx_sharding_map.conf.tmp
chown aloha:aloha /etc/aloha/sharding.json.tmp
chmod 644 /etc/aloha/sharding.json.tmp
mv /etc/aloha/nginx_sharding_map.conf.tmp /etc/aloha/nginx_sharding_map.conf
mv /etc/aloha/sharding.json.tmp /etc/aloha/sharding.json

# In the ordering of operations below, the crucial detail is that
# aloha-django and aloha-workers:* need to be restarted before
# reloading nginx. Django has an in-memory map of which realm belongs
# to which shard. Reloading nginx will cause users' tornado requests
# to be routed according to the new sharding scheme. If that happens
# before Django is restarted, updating its realm->shard map, users on
# realms, whose shard has changed, will have their tornado requests
# handled by the new tornado process, while Django will still use the
# old process for its internal communication with tornado when
# servicing the user's requests.  That's a bad state that leads to
# clients getting into reload loops ending in crashing on 500 response
# while Django is restarting.  For this reason it's important to
# reload nginx only after Django.
supervisorctl restart aloha-django
supervisorctl restart 'aloha-workers:*'
if [ -f /etc/supervisor/conf.d/aloha/aloha-once.conf ]; then
    supervisorctl restart aloha_deliver_scheduled_emails aloha_deliver_scheduled_messages
fi
service nginx reload
