// source: dpServiceCommon.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var CasperMessage_pb = require('./CasperMessage_pb.js');
goog.object.extend(proto, CasperMessage_pb);
var scalapb_scalapb_pb = require('./scalapb/scalapb_pb.js');
goog.object.extend(proto, scalapb_scalapb_pb);
var RhoTypes_pb = require('./RhoTypes_pb.js');
goog.object.extend(proto, RhoTypes_pb);
goog.exportSymbol('proto.casper.BlockEventInfo', null, global);
goog.exportSymbol('proto.casper.BlockInfo', null, global);
goog.exportSymbol('proto.casper.BlockQuery', null, global);
goog.exportSymbol('proto.casper.BlocksQuery', null, global);
goog.exportSymbol('proto.casper.BlocksQueryByHeight', null, global);
goog.exportSymbol('proto.casper.BondInfo', null, global);
goog.exportSymbol('proto.casper.BondStatusQuery', null, global);
goog.exportSymbol('proto.casper.ContinuationAtNameQuery', null, global);
goog.exportSymbol('proto.casper.ContinuationsWithBlockInfo', null, global);
goog.exportSymbol('proto.casper.DataAtNameQuery', null, global);
goog.exportSymbol('proto.casper.DataWithBlockInfo', null, global);
goog.exportSymbol('proto.casper.dpInfo', null, global);
goog.exportSymbol('proto.casper.dpInfoWithEventData', null, global);
goog.exportSymbol('proto.casper.ExploratorydpQuery', null, global);
goog.exportSymbol('proto.casper.FinddpQuery', null, global);
goog.exportSymbol('proto.casper.IsFinalizedQuery', null, global);
goog.exportSymbol('proto.casper.JustificationInfo', null, global);
goog.exportSymbol('proto.casper.LastFinalizedBlockQuery', null, global);
goog.exportSymbol('proto.casper.LightBlockInfo', null, global);
goog.exportSymbol('proto.casper.MachineVerifyQuery', null, global);
goog.exportSymbol('proto.casper.PrivateNamePreviewQuery', null, global);
goog.exportSymbol('proto.casper.RejecteddpInfo', null, global);
goog.exportSymbol('proto.casper.ReportCommProto', null, global);
goog.exportSymbol('proto.casper.ReportConsumeProto', null, global);
goog.exportSymbol('proto.casper.ReportProduceProto', null, global);
goog.exportSymbol('proto.casper.ReportProto', null, global);
goog.exportSymbol('proto.casper.ReportProto.ReportCase', null, global);
goog.exportSymbol('proto.casper.ReportQuery', null, global);
goog.exportSymbol('proto.casper.SingleReport', null, global);
goog.exportSymbol('proto.casper.SystemdpInfoWithEventData', null, global);
goog.exportSymbol('proto.casper.VisualizeDagQuery', null, global);
goog.exportSymbol('proto.casper.WaitingContinuationInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.FinddpQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.FinddpQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.FinddpQuery.displayName = 'proto.casper.FinddpQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlockQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlockQuery.displayName = 'proto.casper.BlockQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ReportQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ReportQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ReportQuery.displayName = 'proto.casper.ReportQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlocksQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlocksQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlocksQuery.displayName = 'proto.casper.BlocksQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlocksQueryByHeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlocksQueryByHeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlocksQueryByHeight.displayName = 'proto.casper.BlocksQueryByHeight';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.DataAtNameQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.DataAtNameQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.DataAtNameQuery.displayName = 'proto.casper.DataAtNameQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ContinuationAtNameQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ContinuationAtNameQuery.repeatedFields_, null);
};
goog.inherits(proto.casper.ContinuationAtNameQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ContinuationAtNameQuery.displayName = 'proto.casper.ContinuationAtNameQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.VisualizeDagQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.VisualizeDagQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.VisualizeDagQuery.displayName = 'proto.casper.VisualizeDagQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.MachineVerifyQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.MachineVerifyQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.MachineVerifyQuery.displayName = 'proto.casper.MachineVerifyQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.PrivateNamePreviewQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.PrivateNamePreviewQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.PrivateNamePreviewQuery.displayName = 'proto.casper.PrivateNamePreviewQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.LastFinalizedBlockQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.LastFinalizedBlockQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.LastFinalizedBlockQuery.displayName = 'proto.casper.LastFinalizedBlockQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.IsFinalizedQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.IsFinalizedQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.IsFinalizedQuery.displayName = 'proto.casper.IsFinalizedQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BondStatusQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BondStatusQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BondStatusQuery.displayName = 'proto.casper.BondStatusQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ExploratorydpQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ExploratorydpQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ExploratorydpQuery.displayName = 'proto.casper.ExploratorydpQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BondInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BondInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BondInfo.displayName = 'proto.casper.BondInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.JustificationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.JustificationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.JustificationInfo.displayName = 'proto.casper.JustificationInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.dpInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.dpInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.dpInfo.displayName = 'proto.casper.dpInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.LightBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.LightBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.LightBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.LightBlockInfo.displayName = 'proto.casper.LightBlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.RejecteddpInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.RejecteddpInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.RejecteddpInfo.displayName = 'proto.casper.RejecteddpInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.BlockInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.BlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlockInfo.displayName = 'proto.casper.BlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.DataWithBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.DataWithBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.DataWithBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.DataWithBlockInfo.displayName = 'proto.casper.DataWithBlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ContinuationsWithBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ContinuationsWithBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.ContinuationsWithBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ContinuationsWithBlockInfo.displayName = 'proto.casper.ContinuationsWithBlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.WaitingContinuationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.WaitingContinuationInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.WaitingContinuationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.WaitingContinuationInfo.displayName = 'proto.casper.WaitingContinuationInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ReportProduceProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ReportProduceProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ReportProduceProto.displayName = 'proto.casper.ReportProduceProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ReportConsumeProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ReportConsumeProto.repeatedFields_, null);
};
goog.inherits(proto.casper.ReportConsumeProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ReportConsumeProto.displayName = 'proto.casper.ReportConsumeProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ReportCommProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ReportCommProto.repeatedFields_, null);
};
goog.inherits(proto.casper.ReportCommProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ReportCommProto.displayName = 'proto.casper.ReportCommProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ReportProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.casper.ReportProto.oneofGroups_);
};
goog.inherits(proto.casper.ReportProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ReportProto.displayName = 'proto.casper.ReportProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.SingleReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.SingleReport.repeatedFields_, null);
};
goog.inherits(proto.casper.SingleReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.SingleReport.displayName = 'proto.casper.SingleReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.dpInfoWithEventData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.dpInfoWithEventData.repeatedFields_, null);
};
goog.inherits(proto.casper.dpInfoWithEventData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.dpInfoWithEventData.displayName = 'proto.casper.dpInfoWithEventData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.SystemdpInfoWithEventData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.SystemdpInfoWithEventData.repeatedFields_, null);
};
goog.inherits(proto.casper.SystemdpInfoWithEventData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.SystemdpInfoWithEventData.displayName = 'proto.casper.SystemdpInfoWithEventData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockEventInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.BlockEventInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.BlockEventInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlockEventInfo.displayName = 'proto.casper.BlockEventInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.FinddpQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.FinddpQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.FinddpQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.FinddpQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    dpid: msg.fetchdpid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.FinddpQuery}
 */
proto.casper.FinddpQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.FinddpQuery;
  return proto.casper.FinddpQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.FinddpQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.FinddpQuery}
 */
proto.casper.FinddpQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setdpid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.FinddpQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.FinddpQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.FinddpQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.FinddpQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchdpid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes dpId = 1;
 * @return {string}
 */
proto.casper.FinddpQuery.prototype.fetchdpid = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dpId = 1;
 * This is a type-conversion wrapper around `fetchdpid()`
 * @return {string}
 */
proto.casper.FinddpQuery.prototype.fetchdpid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchdpid()));
};


/**
 * optional bytes dpId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchdpid()`
 * @return {!Uint8Array}
 */
proto.casper.FinddpQuery.prototype.fetchdpid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchdpid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.FinddpQuery} returns this
 */
proto.casper.FinddpQuery.prototype.setdpid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.fetchFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockQuery}
 */
proto.casper.BlockQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockQuery;
  return proto.casper.BlockQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockQuery}
 */
proto.casper.BlockQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.casper.BlockQuery.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.BlockQuery} returns this
 */
proto.casper.BlockQuery.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ReportQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ReportQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ReportQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.fetchFieldWithDefault(msg, 1, ""),
    forcereplay: jspb.Message.fetchBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ReportQuery}
 */
proto.casper.ReportQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ReportQuery;
  return proto.casper.ReportQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ReportQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ReportQuery}
 */
proto.casper.ReportQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForcereplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ReportQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ReportQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ReportQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.fetchForcereplay();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.casper.ReportQuery.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.ReportQuery} returns this
 */
proto.casper.ReportQuery.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool forceReplay = 2;
 * @return {boolean}
 */
proto.casper.ReportQuery.prototype.fetchForcereplay = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.ReportQuery} returns this
 */
proto.casper.ReportQuery.prototype.setForcereplay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlocksQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlocksQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlocksQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlocksQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.fetchFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlocksQuery}
 */
proto.casper.BlocksQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlocksQuery;
  return proto.casper.BlocksQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlocksQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlocksQuery}
 */
proto.casper.BlocksQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlocksQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlocksQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlocksQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlocksQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.casper.BlocksQuery.prototype.fetchDepth = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.BlocksQuery} returns this
 */
proto.casper.BlocksQuery.prototype.setDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlocksQueryByHeight.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlocksQueryByHeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlocksQueryByHeight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlocksQueryByHeight.toObject = function(includeInstance, msg) {
  var f, obj = {
    startblocknumber: jspb.Message.fetchFieldWithDefault(msg, 1, 0),
    endblocknumber: jspb.Message.fetchFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlocksQueryByHeight}
 */
proto.casper.BlocksQueryByHeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlocksQueryByHeight;
  return proto.casper.BlocksQueryByHeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlocksQueryByHeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlocksQueryByHeight}
 */
proto.casper.BlocksQueryByHeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartblocknumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndblocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlocksQueryByHeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlocksQueryByHeight.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlocksQueryByHeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlocksQueryByHeight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchStartblocknumber();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.fetchEndblocknumber();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 startBlockNumber = 1;
 * @return {number}
 */
proto.casper.BlocksQueryByHeight.prototype.fetchStartblocknumber = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.BlocksQueryByHeight} returns this
 */
proto.casper.BlocksQueryByHeight.prototype.setStartblocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 endBlockNumber = 2;
 * @return {number}
 */
proto.casper.BlocksQueryByHeight.prototype.fetchEndblocknumber = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.BlocksQueryByHeight} returns this
 */
proto.casper.BlocksQueryByHeight.prototype.setEndblocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.DataAtNameQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.DataAtNameQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.DataAtNameQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DataAtNameQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.fetchFieldWithDefault(msg, 1, 0),
    name: (f = msg.fetchName()) && RhoTypes_pb.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.DataAtNameQuery}
 */
proto.casper.DataAtNameQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.DataAtNameQuery;
  return proto.casper.DataAtNameQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.DataAtNameQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.DataAtNameQuery}
 */
proto.casper.DataAtNameQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 2:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.DataAtNameQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.DataAtNameQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.DataAtNameQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DataAtNameQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.fetchName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.casper.DataAtNameQuery.prototype.fetchDepth = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.DataAtNameQuery} returns this
 */
proto.casper.DataAtNameQuery.prototype.setDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Par name = 2;
 * @return {?proto.Par}
 */
proto.casper.DataAtNameQuery.prototype.fetchName = function() {
  return /** @type{?proto.Par} */ (
    jspb.Message.fetchWrapperField(this, RhoTypes_pb.Par, 2));
};


/**
 * @param {?proto.Par|undefined} value
 * @return {!proto.casper.DataAtNameQuery} returns this
*/
proto.casper.DataAtNameQuery.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.DataAtNameQuery} returns this
 */
proto.casper.DataAtNameQuery.prototype.clearName = function() {
  return this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.DataAtNameQuery.prototype.hasName = function() {
  return jspb.Message.fetchField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ContinuationAtNameQuery.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ContinuationAtNameQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ContinuationAtNameQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ContinuationAtNameQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ContinuationAtNameQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.fetchFieldWithDefault(msg, 1, 0),
    namesList: jspb.Message.toObjectList(msg.fetchNamesList(),
    RhoTypes_pb.Par.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ContinuationAtNameQuery}
 */
proto.casper.ContinuationAtNameQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ContinuationAtNameQuery;
  return proto.casper.ContinuationAtNameQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ContinuationAtNameQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ContinuationAtNameQuery}
 */
proto.casper.ContinuationAtNameQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 2:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.addNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ContinuationAtNameQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ContinuationAtNameQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ContinuationAtNameQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ContinuationAtNameQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.fetchNamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.casper.ContinuationAtNameQuery.prototype.fetchDepth = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.ContinuationAtNameQuery} returns this
 */
proto.casper.ContinuationAtNameQuery.prototype.setDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Par names = 2;
 * @return {!Array<!proto.Par>}
 */
proto.casper.ContinuationAtNameQuery.prototype.fetchNamesList = function() {
  return /** @type{!Array<!proto.Par>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, RhoTypes_pb.Par, 2));
};


/**
 * @param {!Array<!proto.Par>} value
 * @return {!proto.casper.ContinuationAtNameQuery} returns this
*/
proto.casper.ContinuationAtNameQuery.prototype.setNamesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Par}
 */
proto.casper.ContinuationAtNameQuery.prototype.addNames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ContinuationAtNameQuery} returns this
 */
proto.casper.ContinuationAtNameQuery.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.VisualizeDagQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.VisualizeDagQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.VisualizeDagQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.VisualizeDagQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.fetchFieldWithDefault(msg, 1, 0),
    showjustificationlines: jspb.Message.fetchBooleanFieldWithDefault(msg, 2, false),
    startblocknumber: jspb.Message.fetchFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.VisualizeDagQuery}
 */
proto.casper.VisualizeDagQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.VisualizeDagQuery;
  return proto.casper.VisualizeDagQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.VisualizeDagQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.VisualizeDagQuery}
 */
proto.casper.VisualizeDagQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowjustificationlines(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartblocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.VisualizeDagQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.VisualizeDagQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.VisualizeDagQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.VisualizeDagQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.fetchShowjustificationlines();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.fetchStartblocknumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.casper.VisualizeDagQuery.prototype.fetchDepth = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.VisualizeDagQuery} returns this
 */
proto.casper.VisualizeDagQuery.prototype.setDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool showJustificationLines = 2;
 * @return {boolean}
 */
proto.casper.VisualizeDagQuery.prototype.fetchShowjustificationlines = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.VisualizeDagQuery} returns this
 */
proto.casper.VisualizeDagQuery.prototype.setShowjustificationlines = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 startBlockNumber = 3;
 * @return {number}
 */
proto.casper.VisualizeDagQuery.prototype.fetchStartblocknumber = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.VisualizeDagQuery} returns this
 */
proto.casper.VisualizeDagQuery.prototype.setStartblocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.MachineVerifyQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.MachineVerifyQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.MachineVerifyQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.MachineVerifyQuery.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.MachineVerifyQuery}
 */
proto.casper.MachineVerifyQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.MachineVerifyQuery;
  return proto.casper.MachineVerifyQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.MachineVerifyQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.MachineVerifyQuery}
 */
proto.casper.MachineVerifyQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.MachineVerifyQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.MachineVerifyQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.MachineVerifyQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.MachineVerifyQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.PrivateNamePreviewQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.PrivateNamePreviewQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.PrivateNamePreviewQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.PrivateNamePreviewQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: msg.fetchUser_asB64(),
    timestamp: jspb.Message.fetchFieldWithDefault(msg, 2, 0),
    nameqty: jspb.Message.fetchFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.PrivateNamePreviewQuery}
 */
proto.casper.PrivateNamePreviewQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.PrivateNamePreviewQuery;
  return proto.casper.PrivateNamePreviewQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.PrivateNamePreviewQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.PrivateNamePreviewQuery}
 */
proto.casper.PrivateNamePreviewQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNameqty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.PrivateNamePreviewQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.PrivateNamePreviewQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.PrivateNamePreviewQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.PrivateNamePreviewQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchUser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.fetchNameqty();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes user = 1;
 * @return {string}
 */
proto.casper.PrivateNamePreviewQuery.prototype.fetchUser = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user = 1;
 * This is a type-conversion wrapper around `fetchUser()`
 * @return {string}
 */
proto.casper.PrivateNamePreviewQuery.prototype.fetchUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchUser()));
};


/**
 * optional bytes user = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchUser()`
 * @return {!Uint8Array}
 */
proto.casper.PrivateNamePreviewQuery.prototype.fetchUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchUser()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.PrivateNamePreviewQuery} returns this
 */
proto.casper.PrivateNamePreviewQuery.prototype.setUser = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.casper.PrivateNamePreviewQuery.prototype.fetchTimestamp = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.PrivateNamePreviewQuery} returns this
 */
proto.casper.PrivateNamePreviewQuery.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 nameQty = 3;
 * @return {number}
 */
proto.casper.PrivateNamePreviewQuery.prototype.fetchNameqty = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.PrivateNamePreviewQuery} returns this
 */
proto.casper.PrivateNamePreviewQuery.prototype.setNameqty = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.LastFinalizedBlockQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.LastFinalizedBlockQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.LastFinalizedBlockQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.LastFinalizedBlockQuery.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.LastFinalizedBlockQuery}
 */
proto.casper.LastFinalizedBlockQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.LastFinalizedBlockQuery;
  return proto.casper.LastFinalizedBlockQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.LastFinalizedBlockQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.LastFinalizedBlockQuery}
 */
proto.casper.LastFinalizedBlockQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.LastFinalizedBlockQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.LastFinalizedBlockQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.LastFinalizedBlockQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.LastFinalizedBlockQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.IsFinalizedQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.IsFinalizedQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.IsFinalizedQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.IsFinalizedQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.fetchFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.IsFinalizedQuery}
 */
proto.casper.IsFinalizedQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.IsFinalizedQuery;
  return proto.casper.IsFinalizedQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.IsFinalizedQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.IsFinalizedQuery}
 */
proto.casper.IsFinalizedQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.IsFinalizedQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.IsFinalizedQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.IsFinalizedQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.IsFinalizedQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.casper.IsFinalizedQuery.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.IsFinalizedQuery} returns this
 */
proto.casper.IsFinalizedQuery.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BondStatusQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BondStatusQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BondStatusQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondStatusQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickey: msg.fetchPublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BondStatusQuery}
 */
proto.casper.BondStatusQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BondStatusQuery;
  return proto.casper.BondStatusQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BondStatusQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BondStatusQuery}
 */
proto.casper.BondStatusQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BondStatusQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BondStatusQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BondStatusQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondStatusQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes publicKey = 1;
 * @return {string}
 */
proto.casper.BondStatusQuery.prototype.fetchPublickey = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes publicKey = 1;
 * This is a type-conversion wrapper around `fetchPublickey()`
 * @return {string}
 */
proto.casper.BondStatusQuery.prototype.fetchPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchPublickey()));
};


/**
 * optional bytes publicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchPublickey()`
 * @return {!Uint8Array}
 */
proto.casper.BondStatusQuery.prototype.fetchPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BondStatusQuery} returns this
 */
proto.casper.BondStatusQuery.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ExploratorydpQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ExploratorydpQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ExploratorydpQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ExploratorydpQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    term: jspb.Message.fetchFieldWithDefault(msg, 1, ""),
    blockhash: jspb.Message.fetchFieldWithDefault(msg, 2, ""),
    useprestatehash: jspb.Message.fetchBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ExploratorydpQuery}
 */
proto.casper.ExploratorydpQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ExploratorydpQuery;
  return proto.casper.ExploratorydpQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ExploratorydpQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ExploratorydpQuery}
 */
proto.casper.ExploratorydpQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerm(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseprestatehash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ExploratorydpQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ExploratorydpQuery.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ExploratorydpQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ExploratorydpQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchTerm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.fetchBlockhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.fetchUseprestatehash();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string term = 1;
 * @return {string}
 */
proto.casper.ExploratorydpQuery.prototype.fetchTerm = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.ExploratorydpQuery} returns this
 */
proto.casper.ExploratorydpQuery.prototype.setTerm = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockHash = 2;
 * @return {string}
 */
proto.casper.ExploratorydpQuery.prototype.fetchBlockhash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.ExploratorydpQuery} returns this
 */
proto.casper.ExploratorydpQuery.prototype.setBlockhash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool usePreStateHash = 3;
 * @return {boolean}
 */
proto.casper.ExploratorydpQuery.prototype.fetchUseprestatehash = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.ExploratorydpQuery} returns this
 */
proto.casper.ExploratorydpQuery.prototype.setUseprestatehash = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BondInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BondInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BondInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.fetchFieldWithDefault(msg, 1, ""),
    stake: jspb.Message.fetchFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BondInfo}
 */
proto.casper.BondInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BondInfo;
  return proto.casper.BondInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BondInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BondInfo}
 */
proto.casper.BondInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BondInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BondInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BondInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchValidator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.fetchStake();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string validator = 1;
 * @return {string}
 */
proto.casper.BondInfo.prototype.fetchValidator = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.BondInfo} returns this
 */
proto.casper.BondInfo.prototype.setValidator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 stake = 2;
 * @return {number}
 */
proto.casper.BondInfo.prototype.fetchStake = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.BondInfo} returns this
 */
proto.casper.BondInfo.prototype.setStake = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.JustificationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.JustificationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.JustificationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.JustificationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.fetchFieldWithDefault(msg, 1, ""),
    latestblockhash: jspb.Message.fetchFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.JustificationInfo}
 */
proto.casper.JustificationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.JustificationInfo;
  return proto.casper.JustificationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.JustificationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.JustificationInfo}
 */
proto.casper.JustificationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatestblockhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.JustificationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.JustificationInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.JustificationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.JustificationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchValidator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.fetchLatestblockhash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string validator = 1;
 * @return {string}
 */
proto.casper.JustificationInfo.prototype.fetchValidator = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.JustificationInfo} returns this
 */
proto.casper.JustificationInfo.prototype.setValidator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string latestBlockHash = 2;
 * @return {string}
 */
proto.casper.JustificationInfo.prototype.fetchLatestblockhash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.JustificationInfo} returns this
 */
proto.casper.JustificationInfo.prototype.setLatestblockhash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.dpInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.dpInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.dpInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.dpInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    dper: jspb.Message.fetchFieldWithDefault(msg, 1, ""),
    term: jspb.Message.fetchFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.fetchFieldWithDefault(msg, 3, 0),
    sig: jspb.Message.fetchFieldWithDefault(msg, 4, ""),
    sigalgorithm: jspb.Message.fetchFieldWithDefault(msg, 5, ""),
    phloprice: jspb.Message.fetchFieldWithDefault(msg, 7, 0),
    phlolimit: jspb.Message.fetchFieldWithDefault(msg, 8, 0),
    validafterblocknumber: jspb.Message.fetchFieldWithDefault(msg, 9, 0),
    cost: jspb.Message.fetchFieldWithDefault(msg, 10, 0),
    errored: jspb.Message.fetchBooleanFieldWithDefault(msg, 11, false),
    systemdperror: jspb.Message.fetchFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.dpInfo}
 */
proto.casper.dpInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.dpInfo;
  return proto.casper.dpInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.dpInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.dpInfo}
 */
proto.casper.dpInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setdper(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSig(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhloprice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhlolimit(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidafterblocknumber(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCost(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setErrored(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemdperror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.dpInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.dpInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.dpInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.dpInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchdper();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.fetchTerm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.fetchTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.fetchSig();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.fetchSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.fetchPhloprice();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.fetchPhlolimit();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.fetchValidafterblocknumber();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.fetchCost();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.fetchErrored();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.fetchSystemdperror();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string dper = 1;
 * @return {string}
 */
proto.casper.dpInfo.prototype.fetchdper = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setdper = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string term = 2;
 * @return {string}
 */
proto.casper.dpInfo.prototype.fetchTerm = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setTerm = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.casper.dpInfo.prototype.fetchTimestamp = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sig = 4;
 * @return {string}
 */
proto.casper.dpInfo.prototype.fetchSig = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setSig = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sigAlgorithm = 5;
 * @return {string}
 */
proto.casper.dpInfo.prototype.fetchSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setSigalgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 phloPrice = 7;
 * @return {number}
 */
proto.casper.dpInfo.prototype.fetchPhloprice = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setPhloprice = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 phloLimit = 8;
 * @return {number}
 */
proto.casper.dpInfo.prototype.fetchPhlolimit = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setPhlolimit = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 validAfterBlockNumber = 9;
 * @return {number}
 */
proto.casper.dpInfo.prototype.fetchValidafterblocknumber = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setValidafterblocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 cost = 10;
 * @return {number}
 */
proto.casper.dpInfo.prototype.fetchCost = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setCost = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool errored = 11;
 * @return {boolean}
 */
proto.casper.dpInfo.prototype.fetchErrored = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setErrored = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string systemdpError = 12;
 * @return {string}
 */
proto.casper.dpInfo.prototype.fetchSystemdperror = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.dpInfo} returns this
 */
proto.casper.dpInfo.prototype.setSystemdperror = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.LightBlockInfo.repeatedFields_ = [11,16,20,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.LightBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.LightBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.LightBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.LightBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: jspb.Message.fetchFieldWithDefault(msg, 1, ""),
    sender: jspb.Message.fetchFieldWithDefault(msg, 2, ""),
    seqnum: jspb.Message.fetchFieldWithDefault(msg, 3, 0),
    sig: jspb.Message.fetchFieldWithDefault(msg, 4, ""),
    sigalgorithm: jspb.Message.fetchFieldWithDefault(msg, 5, ""),
    shardid: jspb.Message.fetchFieldWithDefault(msg, 6, ""),
    extrabytes: msg.fetchExtrabytes_asB64(),
    version: jspb.Message.fetchFieldWithDefault(msg, 8, 0),
    timestamp: jspb.Message.fetchFieldWithDefault(msg, 9, 0),
    headerextrabytes: msg.fetchHeaderextrabytes_asB64(),
    parentshashlistList: (f = jspb.Message.fetchRepeatedField(msg, 11)) == null ? undefined : f,
    blocknumber: jspb.Message.fetchFieldWithDefault(msg, 12, 0),
    prestatehash: jspb.Message.fetchFieldWithDefault(msg, 13, ""),
    poststatehash: jspb.Message.fetchFieldWithDefault(msg, 14, ""),
    bodyextrabytes: msg.fetchBodyextrabytes_asB64(),
    bondsList: jspb.Message.toObjectList(msg.fetchBondsList(),
    proto.casper.BondInfo.toObject, includeInstance),
    blocksize: jspb.Message.fetchFieldWithDefault(msg, 17, ""),
    dpcount: jspb.Message.fetchFieldWithDefault(msg, 18, 0),
    faulttolerance: jspb.Message.fetchFloatingPointFieldWithDefault(msg, 19, 0.0),
    justificationsList: jspb.Message.toObjectList(msg.fetchJustificationsList(),
    proto.casper.JustificationInfo.toObject, includeInstance),
    rejecteddpsList: jspb.Message.toObjectList(msg.fetchRejecteddpsList(),
    proto.casper.RejecteddpInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.LightBlockInfo}
 */
proto.casper.LightBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.LightBlockInfo;
  return proto.casper.LightBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.LightBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.LightBlockInfo}
 */
proto.casper.LightBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSig(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardid(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeaderextrabytes(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addParentshashlist(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknumber(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrestatehash(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoststatehash(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyextrabytes(value);
      break;
    case 16:
      var value = new proto.casper.BondInfo;
      reader.readMessage(value,proto.casper.BondInfo.deserializeBinaryFromReader);
      msg.addBonds(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlocksize(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setdpcount(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFaulttolerance(value);
      break;
    case 20:
      var value = new proto.casper.JustificationInfo;
      reader.readMessage(value,proto.casper.JustificationInfo.deserializeBinaryFromReader);
      msg.addJustifications(value);
      break;
    case 21:
      var value = new proto.casper.RejecteddpInfo;
      reader.readMessage(value,proto.casper.RejecteddpInfo.deserializeBinaryFromReader);
      msg.addRejecteddps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.LightBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.LightBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.LightBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.LightBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchBlockhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.fetchSender();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.fetchSeqnum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.fetchSig();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.fetchSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.fetchShardid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.fetchExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.fetchVersion();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.fetchTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.fetchHeaderextrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.fetchParentshashlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.fetchBlocknumber();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.fetchPrestatehash();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.fetchPoststatehash();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.fetchBodyextrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.fetchBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.casper.BondInfo.serializeBinaryToWriter
    );
  }
  f = message.fetchBlocksize();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.fetchdpcount();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.fetchFaulttolerance();
  if (f !== 0.0) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = message.fetchJustificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.casper.JustificationInfo.serializeBinaryToWriter
    );
  }
  f = message.fetchRejecteddpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.casper.RejecteddpInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string blockHash = 1;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchBlockhash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setBlockhash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sender = 2;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchSender = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 seqNum = 3;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.fetchSeqnum = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setSeqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sig = 4;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchSig = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setSig = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sigAlgorithm = 5;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setSigalgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string shardId = 6;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchShardid = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setShardid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes extraBytes = 7;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchExtrabytes = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes extraBytes = 7;
 * This is a type-conversion wrapper around `fetchExtrabytes()`
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchExtrabytes()));
};


/**
 * optional bytes extraBytes = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchExtrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.LightBlockInfo.prototype.fetchExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchExtrabytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setExtrabytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional int64 version = 8;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.fetchVersion = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 timestamp = 9;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.fetchTimestamp = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes headerExtraBytes = 10;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchHeaderextrabytes = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes headerExtraBytes = 10;
 * This is a type-conversion wrapper around `fetchHeaderextrabytes()`
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchHeaderextrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchHeaderextrabytes()));
};


/**
 * optional bytes headerExtraBytes = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchHeaderextrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.LightBlockInfo.prototype.fetchHeaderextrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchHeaderextrabytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setHeaderextrabytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * repeated string parentsHashList = 11;
 * @return {!Array<string>}
 */
proto.casper.LightBlockInfo.prototype.fetchParentshashlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.fetchRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setParentshashlistList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.addParentshashlist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.clearParentshashlistList = function() {
  return this.setParentshashlistList([]);
};


/**
 * optional int64 blockNumber = 12;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.fetchBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setBlocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string preStateHash = 13;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchPrestatehash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setPrestatehash = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string postStateHash = 14;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchPoststatehash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setPoststatehash = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bytes bodyExtraBytes = 15;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchBodyextrabytes = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes bodyExtraBytes = 15;
 * This is a type-conversion wrapper around `fetchBodyextrabytes()`
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchBodyextrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchBodyextrabytes()));
};


/**
 * optional bytes bodyExtraBytes = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchBodyextrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.LightBlockInfo.prototype.fetchBodyextrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchBodyextrabytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setBodyextrabytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * repeated BondInfo bonds = 16;
 * @return {!Array<!proto.casper.BondInfo>}
 */
proto.casper.LightBlockInfo.prototype.fetchBondsList = function() {
  return /** @type{!Array<!proto.casper.BondInfo>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.BondInfo, 16));
};


/**
 * @param {!Array<!proto.casper.BondInfo>} value
 * @return {!proto.casper.LightBlockInfo} returns this
*/
proto.casper.LightBlockInfo.prototype.setBondsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.casper.BondInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.BondInfo}
 */
proto.casper.LightBlockInfo.prototype.addBonds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.casper.BondInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.clearBondsList = function() {
  return this.setBondsList([]);
};


/**
 * optional string blockSize = 17;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.fetchBlocksize = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setBlocksize = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int32 dpCount = 18;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.fetchdpcount = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setdpcount = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional float faultTolerance = 19;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.fetchFaulttolerance = function() {
  return /** @type {number} */ (jspb.Message.fetchFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.setFaulttolerance = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * repeated JustificationInfo justifications = 20;
 * @return {!Array<!proto.casper.JustificationInfo>}
 */
proto.casper.LightBlockInfo.prototype.fetchJustificationsList = function() {
  return /** @type{!Array<!proto.casper.JustificationInfo>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.JustificationInfo, 20));
};


/**
 * @param {!Array<!proto.casper.JustificationInfo>} value
 * @return {!proto.casper.LightBlockInfo} returns this
*/
proto.casper.LightBlockInfo.prototype.setJustificationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.casper.JustificationInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.JustificationInfo}
 */
proto.casper.LightBlockInfo.prototype.addJustifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.casper.JustificationInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.clearJustificationsList = function() {
  return this.setJustificationsList([]);
};


/**
 * repeated RejecteddpInfo rejecteddps = 21;
 * @return {!Array<!proto.casper.RejecteddpInfo>}
 */
proto.casper.LightBlockInfo.prototype.fetchRejecteddpsList = function() {
  return /** @type{!Array<!proto.casper.RejecteddpInfo>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.RejecteddpInfo, 21));
};


/**
 * @param {!Array<!proto.casper.RejecteddpInfo>} value
 * @return {!proto.casper.LightBlockInfo} returns this
*/
proto.casper.LightBlockInfo.prototype.setRejecteddpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.casper.RejecteddpInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.RejecteddpInfo}
 */
proto.casper.LightBlockInfo.prototype.addRejecteddps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.casper.RejecteddpInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.LightBlockInfo} returns this
 */
proto.casper.LightBlockInfo.prototype.clearRejecteddpsList = function() {
  return this.setRejecteddpsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.RejecteddpInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.RejecteddpInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.RejecteddpInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.RejecteddpInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sig: jspb.Message.fetchFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.RejecteddpInfo}
 */
proto.casper.RejecteddpInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.RejecteddpInfo;
  return proto.casper.RejecteddpInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.RejecteddpInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.RejecteddpInfo}
 */
proto.casper.RejecteddpInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.RejecteddpInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.RejecteddpInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.RejecteddpInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.RejecteddpInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchSig();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sig = 1;
 * @return {string}
 */
proto.casper.RejecteddpInfo.prototype.fetchSig = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.RejecteddpInfo} returns this
 */
proto.casper.RejecteddpInfo.prototype.setSig = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.BlockInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockinfo: (f = msg.fetchBlockinfo()) && proto.casper.LightBlockInfo.toObject(includeInstance, f),
    dpsList: jspb.Message.toObjectList(msg.fetchdpsList(),
    proto.casper.dpInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockInfo}
 */
proto.casper.BlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockInfo;
  return proto.casper.BlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockInfo}
 */
proto.casper.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.LightBlockInfo;
      reader.readMessage(value,proto.casper.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlockinfo(value);
      break;
    case 2:
      var value = new proto.casper.dpInfo;
      reader.readMessage(value,proto.casper.dpInfo.deserializeBinaryFromReader);
      msg.adddps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchBlockinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.LightBlockInfo.serializeBinaryToWriter
    );
  }
  f = message.fetchdpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.dpInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional LightBlockInfo blockInfo = 1;
 * @return {?proto.casper.LightBlockInfo}
 */
proto.casper.BlockInfo.prototype.fetchBlockinfo = function() {
  return /** @type{?proto.casper.LightBlockInfo} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.LightBlockInfo, 1));
};


/**
 * @param {?proto.casper.LightBlockInfo|undefined} value
 * @return {!proto.casper.BlockInfo} returns this
*/
proto.casper.BlockInfo.prototype.setBlockinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.BlockInfo} returns this
 */
proto.casper.BlockInfo.prototype.clearBlockinfo = function() {
  return this.setBlockinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockInfo.prototype.hasBlockinfo = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * repeated dpInfo dps = 2;
 * @return {!Array<!proto.casper.dpInfo>}
 */
proto.casper.BlockInfo.prototype.fetchdpsList = function() {
  return /** @type{!Array<!proto.casper.dpInfo>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.dpInfo, 2));
};


/**
 * @param {!Array<!proto.casper.dpInfo>} value
 * @return {!proto.casper.BlockInfo} returns this
*/
proto.casper.BlockInfo.prototype.setdpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.dpInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.dpInfo}
 */
proto.casper.BlockInfo.prototype.adddps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.dpInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BlockInfo} returns this
 */
proto.casper.BlockInfo.prototype.cleardpsList = function() {
  return this.setdpsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.DataWithBlockInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.DataWithBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.DataWithBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.DataWithBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DataWithBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    postblockdataList: jspb.Message.toObjectList(msg.fetchPostblockdataList(),
    RhoTypes_pb.Par.toObject, includeInstance),
    block: (f = msg.fetchBlock()) && proto.casper.LightBlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.DataWithBlockInfo}
 */
proto.casper.DataWithBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.DataWithBlockInfo;
  return proto.casper.DataWithBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.DataWithBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.DataWithBlockInfo}
 */
proto.casper.DataWithBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.addPostblockdata(value);
      break;
    case 2:
      var value = new proto.casper.LightBlockInfo;
      reader.readMessage(value,proto.casper.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.DataWithBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.DataWithBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.DataWithBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DataWithBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchPostblockdataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
  f = message.fetchBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.LightBlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Par postBlockData = 1;
 * @return {!Array<!proto.Par>}
 */
proto.casper.DataWithBlockInfo.prototype.fetchPostblockdataList = function() {
  return /** @type{!Array<!proto.Par>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, RhoTypes_pb.Par, 1));
};


/**
 * @param {!Array<!proto.Par>} value
 * @return {!proto.casper.DataWithBlockInfo} returns this
*/
proto.casper.DataWithBlockInfo.prototype.setPostblockdataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Par}
 */
proto.casper.DataWithBlockInfo.prototype.addPostblockdata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.DataWithBlockInfo} returns this
 */
proto.casper.DataWithBlockInfo.prototype.clearPostblockdataList = function() {
  return this.setPostblockdataList([]);
};


/**
 * optional LightBlockInfo block = 2;
 * @return {?proto.casper.LightBlockInfo}
 */
proto.casper.DataWithBlockInfo.prototype.fetchBlock = function() {
  return /** @type{?proto.casper.LightBlockInfo} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.LightBlockInfo, 2));
};


/**
 * @param {?proto.casper.LightBlockInfo|undefined} value
 * @return {!proto.casper.DataWithBlockInfo} returns this
*/
proto.casper.DataWithBlockInfo.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.DataWithBlockInfo} returns this
 */
proto.casper.DataWithBlockInfo.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.DataWithBlockInfo.prototype.hasBlock = function() {
  return jspb.Message.fetchField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ContinuationsWithBlockInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ContinuationsWithBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ContinuationsWithBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ContinuationsWithBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    postblockcontinuationsList: jspb.Message.toObjectList(msg.fetchPostblockcontinuationsList(),
    proto.casper.WaitingContinuationInfo.toObject, includeInstance),
    block: (f = msg.fetchBlock()) && proto.casper.LightBlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ContinuationsWithBlockInfo}
 */
proto.casper.ContinuationsWithBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ContinuationsWithBlockInfo;
  return proto.casper.ContinuationsWithBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ContinuationsWithBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ContinuationsWithBlockInfo}
 */
proto.casper.ContinuationsWithBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.WaitingContinuationInfo;
      reader.readMessage(value,proto.casper.WaitingContinuationInfo.deserializeBinaryFromReader);
      msg.addPostblockcontinuations(value);
      break;
    case 2:
      var value = new proto.casper.LightBlockInfo;
      reader.readMessage(value,proto.casper.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ContinuationsWithBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ContinuationsWithBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ContinuationsWithBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchPostblockcontinuationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.casper.WaitingContinuationInfo.serializeBinaryToWriter
    );
  }
  f = message.fetchBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.LightBlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WaitingContinuationInfo postBlockContinuations = 1;
 * @return {!Array<!proto.casper.WaitingContinuationInfo>}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.fetchPostblockcontinuationsList = function() {
  return /** @type{!Array<!proto.casper.WaitingContinuationInfo>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.WaitingContinuationInfo, 1));
};


/**
 * @param {!Array<!proto.casper.WaitingContinuationInfo>} value
 * @return {!proto.casper.ContinuationsWithBlockInfo} returns this
*/
proto.casper.ContinuationsWithBlockInfo.prototype.setPostblockcontinuationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.casper.WaitingContinuationInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.WaitingContinuationInfo}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.addPostblockcontinuations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.casper.WaitingContinuationInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ContinuationsWithBlockInfo} returns this
 */
proto.casper.ContinuationsWithBlockInfo.prototype.clearPostblockcontinuationsList = function() {
  return this.setPostblockcontinuationsList([]);
};


/**
 * optional LightBlockInfo block = 2;
 * @return {?proto.casper.LightBlockInfo}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.fetchBlock = function() {
  return /** @type{?proto.casper.LightBlockInfo} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.LightBlockInfo, 2));
};


/**
 * @param {?proto.casper.LightBlockInfo|undefined} value
 * @return {!proto.casper.ContinuationsWithBlockInfo} returns this
*/
proto.casper.ContinuationsWithBlockInfo.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ContinuationsWithBlockInfo} returns this
 */
proto.casper.ContinuationsWithBlockInfo.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.hasBlock = function() {
  return jspb.Message.fetchField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.WaitingContinuationInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.WaitingContinuationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.WaitingContinuationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.WaitingContinuationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.WaitingContinuationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    postblockpatternsList: jspb.Message.toObjectList(msg.fetchPostblockpatternsList(),
    RhoTypes_pb.BindPattern.toObject, includeInstance),
    postblockcontinuation: (f = msg.fetchPostblockcontinuation()) && RhoTypes_pb.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.WaitingContinuationInfo}
 */
proto.casper.WaitingContinuationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.WaitingContinuationInfo;
  return proto.casper.WaitingContinuationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.WaitingContinuationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.WaitingContinuationInfo}
 */
proto.casper.WaitingContinuationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new RhoTypes_pb.BindPattern;
      reader.readMessage(value,RhoTypes_pb.BindPattern.deserializeBinaryFromReader);
      msg.addPostblockpatterns(value);
      break;
    case 2:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.setPostblockcontinuation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.WaitingContinuationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.WaitingContinuationInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.WaitingContinuationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.WaitingContinuationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchPostblockpatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      RhoTypes_pb.BindPattern.serializeBinaryToWriter
    );
  }
  f = message.fetchPostblockcontinuation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BindPattern postBlockPatterns = 1;
 * @return {!Array<!proto.BindPattern>}
 */
proto.casper.WaitingContinuationInfo.prototype.fetchPostblockpatternsList = function() {
  return /** @type{!Array<!proto.BindPattern>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, RhoTypes_pb.BindPattern, 1));
};


/**
 * @param {!Array<!proto.BindPattern>} value
 * @return {!proto.casper.WaitingContinuationInfo} returns this
*/
proto.casper.WaitingContinuationInfo.prototype.setPostblockpatternsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BindPattern=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BindPattern}
 */
proto.casper.WaitingContinuationInfo.prototype.addPostblockpatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BindPattern, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.WaitingContinuationInfo} returns this
 */
proto.casper.WaitingContinuationInfo.prototype.clearPostblockpatternsList = function() {
  return this.setPostblockpatternsList([]);
};


/**
 * optional Par postBlockContinuation = 2;
 * @return {?proto.Par}
 */
proto.casper.WaitingContinuationInfo.prototype.fetchPostblockcontinuation = function() {
  return /** @type{?proto.Par} */ (
    jspb.Message.fetchWrapperField(this, RhoTypes_pb.Par, 2));
};


/**
 * @param {?proto.Par|undefined} value
 * @return {!proto.casper.WaitingContinuationInfo} returns this
*/
proto.casper.WaitingContinuationInfo.prototype.setPostblockcontinuation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.WaitingContinuationInfo} returns this
 */
proto.casper.WaitingContinuationInfo.prototype.clearPostblockcontinuation = function() {
  return this.setPostblockcontinuation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.WaitingContinuationInfo.prototype.hasPostblockcontinuation = function() {
  return jspb.Message.fetchField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ReportProduceProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ReportProduceProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ReportProduceProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportProduceProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: (f = msg.fetchChannel()) && RhoTypes_pb.Par.toObject(includeInstance, f),
    data: (f = msg.fetchData()) && RhoTypes_pb.ListParWithRandom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ReportProduceProto}
 */
proto.casper.ReportProduceProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ReportProduceProto;
  return proto.casper.ReportProduceProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ReportProduceProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ReportProduceProto}
 */
proto.casper.ReportProduceProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 2:
      var value = new RhoTypes_pb.ListParWithRandom;
      reader.readMessage(value,RhoTypes_pb.ListParWithRandom.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ReportProduceProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ReportProduceProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ReportProduceProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportProduceProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
  f = message.fetchData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.ListParWithRandom.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par channel = 1;
 * @return {?proto.Par}
 */
proto.casper.ReportProduceProto.prototype.fetchChannel = function() {
  return /** @type{?proto.Par} */ (
    jspb.Message.fetchWrapperField(this, RhoTypes_pb.Par, 1));
};


/**
 * @param {?proto.Par|undefined} value
 * @return {!proto.casper.ReportProduceProto} returns this
*/
proto.casper.ReportProduceProto.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ReportProduceProto} returns this
 */
proto.casper.ReportProduceProto.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ReportProduceProto.prototype.hasChannel = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * optional ListParWithRandom data = 2;
 * @return {?proto.ListParWithRandom}
 */
proto.casper.ReportProduceProto.prototype.fetchData = function() {
  return /** @type{?proto.ListParWithRandom} */ (
    jspb.Message.fetchWrapperField(this, RhoTypes_pb.ListParWithRandom, 2));
};


/**
 * @param {?proto.ListParWithRandom|undefined} value
 * @return {!proto.casper.ReportProduceProto} returns this
*/
proto.casper.ReportProduceProto.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ReportProduceProto} returns this
 */
proto.casper.ReportProduceProto.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ReportProduceProto.prototype.hasData = function() {
  return jspb.Message.fetchField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ReportConsumeProto.repeatedFields_ = [1,2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ReportConsumeProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ReportConsumeProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ReportConsumeProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportConsumeProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelsList: jspb.Message.toObjectList(msg.fetchChannelsList(),
    RhoTypes_pb.Par.toObject, includeInstance),
    patternsList: jspb.Message.toObjectList(msg.fetchPatternsList(),
    RhoTypes_pb.BindPattern.toObject, includeInstance),
    peeksList: jspb.Message.toObjectList(msg.fetchPeeksList(),
    CasperMessage_pb.PeekProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ReportConsumeProto}
 */
proto.casper.ReportConsumeProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ReportConsumeProto;
  return proto.casper.ReportConsumeProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ReportConsumeProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ReportConsumeProto}
 */
proto.casper.ReportConsumeProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 2:
      var value = new RhoTypes_pb.BindPattern;
      reader.readMessage(value,RhoTypes_pb.BindPattern.deserializeBinaryFromReader);
      msg.addPatterns(value);
      break;
    case 4:
      var value = new CasperMessage_pb.PeekProto;
      reader.readMessage(value,CasperMessage_pb.PeekProto.deserializeBinaryFromReader);
      msg.addPeeks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ReportConsumeProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ReportConsumeProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ReportConsumeProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportConsumeProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
  f = message.fetchPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      RhoTypes_pb.BindPattern.serializeBinaryToWriter
    );
  }
  f = message.fetchPeeksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      CasperMessage_pb.PeekProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Par channels = 1;
 * @return {!Array<!proto.Par>}
 */
proto.casper.ReportConsumeProto.prototype.fetchChannelsList = function() {
  return /** @type{!Array<!proto.Par>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, RhoTypes_pb.Par, 1));
};


/**
 * @param {!Array<!proto.Par>} value
 * @return {!proto.casper.ReportConsumeProto} returns this
*/
proto.casper.ReportConsumeProto.prototype.setChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Par}
 */
proto.casper.ReportConsumeProto.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ReportConsumeProto} returns this
 */
proto.casper.ReportConsumeProto.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * repeated BindPattern patterns = 2;
 * @return {!Array<!proto.BindPattern>}
 */
proto.casper.ReportConsumeProto.prototype.fetchPatternsList = function() {
  return /** @type{!Array<!proto.BindPattern>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, RhoTypes_pb.BindPattern, 2));
};


/**
 * @param {!Array<!proto.BindPattern>} value
 * @return {!proto.casper.ReportConsumeProto} returns this
*/
proto.casper.ReportConsumeProto.prototype.setPatternsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.BindPattern=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BindPattern}
 */
proto.casper.ReportConsumeProto.prototype.addPatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BindPattern, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ReportConsumeProto} returns this
 */
proto.casper.ReportConsumeProto.prototype.clearPatternsList = function() {
  return this.setPatternsList([]);
};


/**
 * repeated PeekProto peeks = 4;
 * @return {!Array<!proto.casper.PeekProto>}
 */
proto.casper.ReportConsumeProto.prototype.fetchPeeksList = function() {
  return /** @type{!Array<!proto.casper.PeekProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, CasperMessage_pb.PeekProto, 4));
};


/**
 * @param {!Array<!proto.casper.PeekProto>} value
 * @return {!proto.casper.ReportConsumeProto} returns this
*/
proto.casper.ReportConsumeProto.prototype.setPeeksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.casper.PeekProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.PeekProto}
 */
proto.casper.ReportConsumeProto.prototype.addPeeks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.casper.PeekProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ReportConsumeProto} returns this
 */
proto.casper.ReportConsumeProto.prototype.clearPeeksList = function() {
  return this.setPeeksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ReportCommProto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ReportCommProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ReportCommProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ReportCommProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportCommProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    consume: (f = msg.fetchConsume()) && proto.casper.ReportConsumeProto.toObject(includeInstance, f),
    producesList: jspb.Message.toObjectList(msg.fetchProducesList(),
    proto.casper.ReportProduceProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ReportCommProto}
 */
proto.casper.ReportCommProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ReportCommProto;
  return proto.casper.ReportCommProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ReportCommProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ReportCommProto}
 */
proto.casper.ReportCommProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ReportConsumeProto;
      reader.readMessage(value,proto.casper.ReportConsumeProto.deserializeBinaryFromReader);
      msg.setConsume(value);
      break;
    case 2:
      var value = new proto.casper.ReportProduceProto;
      reader.readMessage(value,proto.casper.ReportProduceProto.deserializeBinaryFromReader);
      msg.addProduces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ReportCommProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ReportCommProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ReportCommProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportCommProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchConsume();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ReportConsumeProto.serializeBinaryToWriter
    );
  }
  f = message.fetchProducesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.ReportProduceProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReportConsumeProto consume = 1;
 * @return {?proto.casper.ReportConsumeProto}
 */
proto.casper.ReportCommProto.prototype.fetchConsume = function() {
  return /** @type{?proto.casper.ReportConsumeProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ReportConsumeProto, 1));
};


/**
 * @param {?proto.casper.ReportConsumeProto|undefined} value
 * @return {!proto.casper.ReportCommProto} returns this
*/
proto.casper.ReportCommProto.prototype.setConsume = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ReportCommProto} returns this
 */
proto.casper.ReportCommProto.prototype.clearConsume = function() {
  return this.setConsume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ReportCommProto.prototype.hasConsume = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * repeated ReportProduceProto produces = 2;
 * @return {!Array<!proto.casper.ReportProduceProto>}
 */
proto.casper.ReportCommProto.prototype.fetchProducesList = function() {
  return /** @type{!Array<!proto.casper.ReportProduceProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.ReportProduceProto, 2));
};


/**
 * @param {!Array<!proto.casper.ReportProduceProto>} value
 * @return {!proto.casper.ReportCommProto} returns this
*/
proto.casper.ReportCommProto.prototype.setProducesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.ReportProduceProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.ReportProduceProto}
 */
proto.casper.ReportCommProto.prototype.addProduces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.ReportProduceProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ReportCommProto} returns this
 */
proto.casper.ReportCommProto.prototype.clearProducesList = function() {
  return this.setProducesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.casper.ReportProto.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.casper.ReportProto.ReportCase = {
  REPORT_NOT_SET: 0,
  PRODUCE: 1,
  CONSUME: 2,
  COMM: 3
};

/**
 * @return {proto.casper.ReportProto.ReportCase}
 */
proto.casper.ReportProto.prototype.fetchReportCase = function() {
  return /** @type {proto.casper.ReportProto.ReportCase} */(jspb.Message.computeOneofCase(this, proto.casper.ReportProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ReportProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ReportProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ReportProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    produce: (f = msg.fetchProduce()) && proto.casper.ReportProduceProto.toObject(includeInstance, f),
    consume: (f = msg.fetchConsume()) && proto.casper.ReportConsumeProto.toObject(includeInstance, f),
    comm: (f = msg.fetchComm()) && proto.casper.ReportCommProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ReportProto}
 */
proto.casper.ReportProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ReportProto;
  return proto.casper.ReportProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ReportProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ReportProto}
 */
proto.casper.ReportProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ReportProduceProto;
      reader.readMessage(value,proto.casper.ReportProduceProto.deserializeBinaryFromReader);
      msg.setProduce(value);
      break;
    case 2:
      var value = new proto.casper.ReportConsumeProto;
      reader.readMessage(value,proto.casper.ReportConsumeProto.deserializeBinaryFromReader);
      msg.setConsume(value);
      break;
    case 3:
      var value = new proto.casper.ReportCommProto;
      reader.readMessage(value,proto.casper.ReportCommProto.deserializeBinaryFromReader);
      msg.setComm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ReportProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ReportProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ReportProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ReportProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchProduce();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ReportProduceProto.serializeBinaryToWriter
    );
  }
  f = message.fetchConsume();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.ReportConsumeProto.serializeBinaryToWriter
    );
  }
  f = message.fetchComm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.casper.ReportCommProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReportProduceProto produce = 1;
 * @return {?proto.casper.ReportProduceProto}
 */
proto.casper.ReportProto.prototype.fetchProduce = function() {
  return /** @type{?proto.casper.ReportProduceProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ReportProduceProto, 1));
};


/**
 * @param {?proto.casper.ReportProduceProto|undefined} value
 * @return {!proto.casper.ReportProto} returns this
*/
proto.casper.ReportProto.prototype.setProduce = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.casper.ReportProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ReportProto} returns this
 */
proto.casper.ReportProto.prototype.clearProduce = function() {
  return this.setProduce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ReportProto.prototype.hasProduce = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * optional ReportConsumeProto consume = 2;
 * @return {?proto.casper.ReportConsumeProto}
 */
proto.casper.ReportProto.prototype.fetchConsume = function() {
  return /** @type{?proto.casper.ReportConsumeProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ReportConsumeProto, 2));
};


/**
 * @param {?proto.casper.ReportConsumeProto|undefined} value
 * @return {!proto.casper.ReportProto} returns this
*/
proto.casper.ReportProto.prototype.setConsume = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.casper.ReportProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ReportProto} returns this
 */
proto.casper.ReportProto.prototype.clearConsume = function() {
  return this.setConsume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ReportProto.prototype.hasConsume = function() {
  return jspb.Message.fetchField(this, 2) != null;
};


/**
 * optional ReportCommProto comm = 3;
 * @return {?proto.casper.ReportCommProto}
 */
proto.casper.ReportProto.prototype.fetchComm = function() {
  return /** @type{?proto.casper.ReportCommProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ReportCommProto, 3));
};


/**
 * @param {?proto.casper.ReportCommProto|undefined} value
 * @return {!proto.casper.ReportProto} returns this
*/
proto.casper.ReportProto.prototype.setComm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.casper.ReportProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ReportProto} returns this
 */
proto.casper.ReportProto.prototype.clearComm = function() {
  return this.setComm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ReportProto.prototype.hasComm = function() {
  return jspb.Message.fetchField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.SingleReport.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.SingleReport.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.SingleReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.SingleReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.SingleReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.fetchEventsList(),
    proto.casper.ReportProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.SingleReport}
 */
proto.casper.SingleReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.SingleReport;
  return proto.casper.SingleReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.SingleReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.SingleReport}
 */
proto.casper.SingleReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ReportProto;
      reader.readMessage(value,proto.casper.ReportProto.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.SingleReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.SingleReport.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.SingleReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.SingleReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.casper.ReportProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReportProto events = 1;
 * @return {!Array<!proto.casper.ReportProto>}
 */
proto.casper.SingleReport.prototype.fetchEventsList = function() {
  return /** @type{!Array<!proto.casper.ReportProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.ReportProto, 1));
};


/**
 * @param {!Array<!proto.casper.ReportProto>} value
 * @return {!proto.casper.SingleReport} returns this
*/
proto.casper.SingleReport.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.casper.ReportProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.ReportProto}
 */
proto.casper.SingleReport.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.casper.ReportProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.SingleReport} returns this
 */
proto.casper.SingleReport.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.dpInfoWithEventData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.dpInfoWithEventData.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.dpInfoWithEventData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.dpInfoWithEventData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.dpInfoWithEventData.toObject = function(includeInstance, msg) {
  var f, obj = {
    dpinfo: (f = msg.fetchdpinfo()) && proto.casper.dpInfo.toObject(includeInstance, f),
    reportList: jspb.Message.toObjectList(msg.fetchReportList(),
    proto.casper.SingleReport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.dpInfoWithEventData}
 */
proto.casper.dpInfoWithEventData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.dpInfoWithEventData;
  return proto.casper.dpInfoWithEventData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.dpInfoWithEventData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.dpInfoWithEventData}
 */
proto.casper.dpInfoWithEventData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.dpInfo;
      reader.readMessage(value,proto.casper.dpInfo.deserializeBinaryFromReader);
      msg.setdpinfo(value);
      break;
    case 2:
      var value = new proto.casper.SingleReport;
      reader.readMessage(value,proto.casper.SingleReport.deserializeBinaryFromReader);
      msg.addReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.dpInfoWithEventData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.dpInfoWithEventData.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.dpInfoWithEventData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.dpInfoWithEventData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchdpinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.dpInfo.serializeBinaryToWriter
    );
  }
  f = message.fetchReportList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.SingleReport.serializeBinaryToWriter
    );
  }
};


/**
 * optional dpInfo dpInfo = 1;
 * @return {?proto.casper.dpInfo}
 */
proto.casper.dpInfoWithEventData.prototype.fetchdpinfo = function() {
  return /** @type{?proto.casper.dpInfo} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.dpInfo, 1));
};


/**
 * @param {?proto.casper.dpInfo|undefined} value
 * @return {!proto.casper.dpInfoWithEventData} returns this
*/
proto.casper.dpInfoWithEventData.prototype.setdpinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.dpInfoWithEventData} returns this
 */
proto.casper.dpInfoWithEventData.prototype.cleardpinfo = function() {
  return this.setdpinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.dpInfoWithEventData.prototype.hasdpinfo = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * repeated SingleReport report = 2;
 * @return {!Array<!proto.casper.SingleReport>}
 */
proto.casper.dpInfoWithEventData.prototype.fetchReportList = function() {
  return /** @type{!Array<!proto.casper.SingleReport>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.SingleReport, 2));
};


/**
 * @param {!Array<!proto.casper.SingleReport>} value
 * @return {!proto.casper.dpInfoWithEventData} returns this
*/
proto.casper.dpInfoWithEventData.prototype.setReportList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.SingleReport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.SingleReport}
 */
proto.casper.dpInfoWithEventData.prototype.addReport = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.SingleReport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.dpInfoWithEventData} returns this
 */
proto.casper.dpInfoWithEventData.prototype.clearReportList = function() {
  return this.setReportList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.SystemdpInfoWithEventData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.SystemdpInfoWithEventData.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.SystemdpInfoWithEventData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.SystemdpInfoWithEventData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.SystemdpInfoWithEventData.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemdp: (f = msg.fetchSystemdp()) && CasperMessage_pb.SystemdpDataProto.toObject(includeInstance, f),
    reportList: jspb.Message.toObjectList(msg.fetchReportList(),
    proto.casper.SingleReport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.SystemdpInfoWithEventData}
 */
proto.casper.SystemdpInfoWithEventData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.SystemdpInfoWithEventData;
  return proto.casper.SystemdpInfoWithEventData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.SystemdpInfoWithEventData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.SystemdpInfoWithEventData}
 */
proto.casper.SystemdpInfoWithEventData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new CasperMessage_pb.SystemdpDataProto;
      reader.readMessage(value,CasperMessage_pb.SystemdpDataProto.deserializeBinaryFromReader);
      msg.setSystemdp(value);
      break;
    case 2:
      var value = new proto.casper.SingleReport;
      reader.readMessage(value,proto.casper.SingleReport.deserializeBinaryFromReader);
      msg.addReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.SystemdpInfoWithEventData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.SystemdpInfoWithEventData.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.SystemdpInfoWithEventData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.SystemdpInfoWithEventData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchSystemdp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      CasperMessage_pb.SystemdpDataProto.serializeBinaryToWriter
    );
  }
  f = message.fetchReportList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.SingleReport.serializeBinaryToWriter
    );
  }
};


/**
 * optional SystemdpDataProto systemdp = 1;
 * @return {?proto.casper.SystemdpDataProto}
 */
proto.casper.SystemdpInfoWithEventData.prototype.fetchSystemdp = function() {
  return /** @type{?proto.casper.SystemdpDataProto} */ (
    jspb.Message.fetchWrapperField(this, CasperMessage_pb.SystemdpDataProto, 1));
};


/**
 * @param {?proto.casper.SystemdpDataProto|undefined} value
 * @return {!proto.casper.SystemdpInfoWithEventData} returns this
*/
proto.casper.SystemdpInfoWithEventData.prototype.setSystemdp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.SystemdpInfoWithEventData} returns this
 */
proto.casper.SystemdpInfoWithEventData.prototype.clearSystemdp = function() {
  return this.setSystemdp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.SystemdpInfoWithEventData.prototype.hasSystemdp = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * repeated SingleReport report = 2;
 * @return {!Array<!proto.casper.SingleReport>}
 */
proto.casper.SystemdpInfoWithEventData.prototype.fetchReportList = function() {
  return /** @type{!Array<!proto.casper.SingleReport>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.SingleReport, 2));
};


/**
 * @param {!Array<!proto.casper.SingleReport>} value
 * @return {!proto.casper.SystemdpInfoWithEventData} returns this
*/
proto.casper.SystemdpInfoWithEventData.prototype.setReportList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.SingleReport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.SingleReport}
 */
proto.casper.SystemdpInfoWithEventData.prototype.addReport = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.SingleReport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.SystemdpInfoWithEventData} returns this
 */
proto.casper.SystemdpInfoWithEventData.prototype.clearReportList = function() {
  return this.setReportList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.BlockEventInfo.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockEventInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockEventInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockEventInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockEventInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockinfo: (f = msg.fetchBlockinfo()) && proto.casper.LightBlockInfo.toObject(includeInstance, f),
    dpsList: jspb.Message.toObjectList(msg.fetchdpsList(),
    proto.casper.dpInfoWithEventData.toObject, includeInstance),
    systemdpsList: jspb.Message.toObjectList(msg.fetchSystemdpsList(),
    proto.casper.SystemdpInfoWithEventData.toObject, includeInstance),
    poststatehash: msg.fetchPoststatehash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockEventInfo}
 */
proto.casper.BlockEventInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockEventInfo;
  return proto.casper.BlockEventInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockEventInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockEventInfo}
 */
proto.casper.BlockEventInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.LightBlockInfo;
      reader.readMessage(value,proto.casper.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlockinfo(value);
      break;
    case 2:
      var value = new proto.casper.dpInfoWithEventData;
      reader.readMessage(value,proto.casper.dpInfoWithEventData.deserializeBinaryFromReader);
      msg.adddps(value);
      break;
    case 3:
      var value = new proto.casper.SystemdpInfoWithEventData;
      reader.readMessage(value,proto.casper.SystemdpInfoWithEventData.deserializeBinaryFromReader);
      msg.addSystemdps(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPoststatehash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockEventInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockEventInfo.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockEventInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockEventInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchBlockinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.LightBlockInfo.serializeBinaryToWriter
    );
  }
  f = message.fetchdpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.dpInfoWithEventData.serializeBinaryToWriter
    );
  }
  f = message.fetchSystemdpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.casper.SystemdpInfoWithEventData.serializeBinaryToWriter
    );
  }
  f = message.fetchPoststatehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional LightBlockInfo blockInfo = 1;
 * @return {?proto.casper.LightBlockInfo}
 */
proto.casper.BlockEventInfo.prototype.fetchBlockinfo = function() {
  return /** @type{?proto.casper.LightBlockInfo} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.LightBlockInfo, 1));
};


/**
 * @param {?proto.casper.LightBlockInfo|undefined} value
 * @return {!proto.casper.BlockEventInfo} returns this
*/
proto.casper.BlockEventInfo.prototype.setBlockinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.BlockEventInfo} returns this
 */
proto.casper.BlockEventInfo.prototype.clearBlockinfo = function() {
  return this.setBlockinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockEventInfo.prototype.hasBlockinfo = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * repeated dpInfoWithEventData dps = 2;
 * @return {!Array<!proto.casper.dpInfoWithEventData>}
 */
proto.casper.BlockEventInfo.prototype.fetchdpsList = function() {
  return /** @type{!Array<!proto.casper.dpInfoWithEventData>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.dpInfoWithEventData, 2));
};


/**
 * @param {!Array<!proto.casper.dpInfoWithEventData>} value
 * @return {!proto.casper.BlockEventInfo} returns this
*/
proto.casper.BlockEventInfo.prototype.setdpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.dpInfoWithEventData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.dpInfoWithEventData}
 */
proto.casper.BlockEventInfo.prototype.adddps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.dpInfoWithEventData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BlockEventInfo} returns this
 */
proto.casper.BlockEventInfo.prototype.cleardpsList = function() {
  return this.setdpsList([]);
};


/**
 * repeated SystemdpInfoWithEventData systemdps = 3;
 * @return {!Array<!proto.casper.SystemdpInfoWithEventData>}
 */
proto.casper.BlockEventInfo.prototype.fetchSystemdpsList = function() {
  return /** @type{!Array<!proto.casper.SystemdpInfoWithEventData>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.SystemdpInfoWithEventData, 3));
};


/**
 * @param {!Array<!proto.casper.SystemdpInfoWithEventData>} value
 * @return {!proto.casper.BlockEventInfo} returns this
*/
proto.casper.BlockEventInfo.prototype.setSystemdpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.casper.SystemdpInfoWithEventData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.SystemdpInfoWithEventData}
 */
proto.casper.BlockEventInfo.prototype.addSystemdps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.casper.SystemdpInfoWithEventData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BlockEventInfo} returns this
 */
proto.casper.BlockEventInfo.prototype.clearSystemdpsList = function() {
  return this.setSystemdpsList([]);
};


/**
 * optional bytes postStateHash = 4;
 * @return {string}
 */
proto.casper.BlockEventInfo.prototype.fetchPoststatehash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes postStateHash = 4;
 * This is a type-conversion wrapper around `fetchPoststatehash()`
 * @return {string}
 */
proto.casper.BlockEventInfo.prototype.fetchPoststatehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchPoststatehash()));
};


/**
 * optional bytes postStateHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchPoststatehash()`
 * @return {!Uint8Array}
 */
proto.casper.BlockEventInfo.prototype.fetchPoststatehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchPoststatehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockEventInfo} returns this
 */
proto.casper.BlockEventInfo.prototype.setPoststatehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


goog.object.extend(exports, proto.casper);
