// source: CasperMessage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var scalapb_scalapb_pb = require('./scalapb/scalapb_pb.js');
goog.object.extend(proto, scalapb_scalapb_pb);
var RhoTypes_pb = require('./RhoTypes_pb.js');
goog.object.extend(proto, RhoTypes_pb);
goog.exportSymbol('proto.casper.ApprovedBlockCandidateProto', null, global);
goog.exportSymbol('proto.casper.ApprovedBlockProto', null, global);
goog.exportSymbol('proto.casper.ApprovedBlockRequestProto', null, global);
goog.exportSymbol('proto.casper.BlockApprovalProto', null, global);
goog.exportSymbol('proto.casper.BlockHashMessageProto', null, global);
goog.exportSymbol('proto.casper.BlockMessageProto', null, global);
goog.exportSymbol('proto.casper.BlockMetadataInternal', null, global);
goog.exportSymbol('proto.casper.BlockRequestProto', null, global);
goog.exportSymbol('proto.casper.BodyProto', null, global);
goog.exportSymbol('proto.casper.BondProto', null, global);
goog.exportSymbol('proto.casper.CloseBlockSystemdpDataProto', null, global);
goog.exportSymbol('proto.casper.CommEventProto', null, global);
goog.exportSymbol('proto.casper.ConsumeEventProto', null, global);
goog.exportSymbol('proto.casper.dpDataProto', null, global);
goog.exportSymbol('proto.casper.EventProto', null, global);
goog.exportSymbol('proto.casper.EventProto.EventInstanceCase', null, global);
goog.exportSymbol('proto.casper.ForkChoiceTipRequestProto', null, global);
goog.exportSymbol('proto.casper.HasBlockProto', null, global);
goog.exportSymbol('proto.casper.HasBlockRequestProto', null, global);
goog.exportSymbol('proto.casper.HeaderProto', null, global);
goog.exportSymbol('proto.casper.JustificationProto', null, global);
goog.exportSymbol('proto.casper.NoApprovedBlockAvailableProto', null, global);
goog.exportSymbol('proto.casper.PeekProto', null, global);
goog.exportSymbol('proto.casper.ProcesseddpProto', null, global);
goog.exportSymbol('proto.casper.ProcessedSystemdpProto', null, global);
goog.exportSymbol('proto.casper.ProduceEventProto', null, global);
goog.exportSymbol('proto.casper.RChainStateProto', null, global);
goog.exportSymbol('proto.casper.RejecteddpProto', null, global);
goog.exportSymbol('proto.casper.Signature', null, global);
goog.exportSymbol('proto.casper.SlashSystemdpDataProto', null, global);
goog.exportSymbol('proto.casper.StoreItemProto', null, global);
goog.exportSymbol('proto.casper.StoreItemsMessageProto', null, global);
goog.exportSymbol('proto.casper.StoreItemsMessageRequestProto', null, global);
goog.exportSymbol('proto.casper.StoreNodeKeyProto', null, global);
goog.exportSymbol('proto.casper.SystemdpDataProto', null, global);
goog.exportSymbol('proto.casper.SystemdpDataProto.SystemdpCase', null, global);
goog.exportSymbol('proto.casper.UnapprovedBlockProto', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.HasBlockRequestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.HasBlockRequestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.HasBlockRequestProto.displayName = 'proto.casper.HasBlockRequestProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.HasBlockProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.HasBlockProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.HasBlockProto.displayName = 'proto.casper.HasBlockProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockRequestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlockRequestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlockRequestProto.displayName = 'proto.casper.BlockRequestProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ForkChoiceTipRequestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ForkChoiceTipRequestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ForkChoiceTipRequestProto.displayName = 'proto.casper.ForkChoiceTipRequestProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ApprovedBlockCandidateProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ApprovedBlockCandidateProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ApprovedBlockCandidateProto.displayName = 'proto.casper.ApprovedBlockCandidateProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.UnapprovedBlockProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.UnapprovedBlockProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.UnapprovedBlockProto.displayName = 'proto.casper.UnapprovedBlockProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.Signature.displayName = 'proto.casper.Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockApprovalProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlockApprovalProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlockApprovalProto.displayName = 'proto.casper.BlockApprovalProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ApprovedBlockProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ApprovedBlockProto.repeatedFields_, null);
};
goog.inherits(proto.casper.ApprovedBlockProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ApprovedBlockProto.displayName = 'proto.casper.ApprovedBlockProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ApprovedBlockRequestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ApprovedBlockRequestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ApprovedBlockRequestProto.displayName = 'proto.casper.ApprovedBlockRequestProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.NoApprovedBlockAvailableProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.NoApprovedBlockAvailableProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.NoApprovedBlockAvailableProto.displayName = 'proto.casper.NoApprovedBlockAvailableProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockMessageProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.BlockMessageProto.repeatedFields_, null);
};
goog.inherits(proto.casper.BlockMessageProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlockMessageProto.displayName = 'proto.casper.BlockMessageProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockHashMessageProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlockHashMessageProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlockHashMessageProto.displayName = 'proto.casper.BlockHashMessageProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockMetadataInternal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.BlockMetadataInternal.repeatedFields_, null);
};
goog.inherits(proto.casper.BlockMetadataInternal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BlockMetadataInternal.displayName = 'proto.casper.BlockMetadataInternal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.HeaderProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.HeaderProto.repeatedFields_, null);
};
goog.inherits(proto.casper.HeaderProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.HeaderProto.displayName = 'proto.casper.HeaderProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.dpDataProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.dpDataProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.dpDataProto.displayName = 'proto.casper.dpDataProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ProcesseddpProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ProcesseddpProto.repeatedFields_, null);
};
goog.inherits(proto.casper.ProcesseddpProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ProcesseddpProto.displayName = 'proto.casper.ProcesseddpProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.SlashSystemdpDataProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.SlashSystemdpDataProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.SlashSystemdpDataProto.displayName = 'proto.casper.SlashSystemdpDataProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.CloseBlockSystemdpDataProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.CloseBlockSystemdpDataProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.CloseBlockSystemdpDataProto.displayName = 'proto.casper.CloseBlockSystemdpDataProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.SystemdpDataProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.casper.SystemdpDataProto.oneofGroups_);
};
goog.inherits(proto.casper.SystemdpDataProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.SystemdpDataProto.displayName = 'proto.casper.SystemdpDataProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ProcessedSystemdpProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ProcessedSystemdpProto.repeatedFields_, null);
};
goog.inherits(proto.casper.ProcessedSystemdpProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ProcessedSystemdpProto.displayName = 'proto.casper.ProcessedSystemdpProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BodyProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.BodyProto.repeatedFields_, null);
};
goog.inherits(proto.casper.BodyProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BodyProto.displayName = 'proto.casper.BodyProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.RejecteddpProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.RejecteddpProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.RejecteddpProto.displayName = 'proto.casper.RejecteddpProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.JustificationProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.JustificationProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.JustificationProto.displayName = 'proto.casper.JustificationProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.RChainStateProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.RChainStateProto.repeatedFields_, null);
};
goog.inherits(proto.casper.RChainStateProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.RChainStateProto.displayName = 'proto.casper.RChainStateProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.EventProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.casper.EventProto.oneofGroups_);
};
goog.inherits(proto.casper.EventProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.EventProto.displayName = 'proto.casper.EventProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ProduceEventProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ProduceEventProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ProduceEventProto.displayName = 'proto.casper.ProduceEventProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ConsumeEventProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ConsumeEventProto.repeatedFields_, null);
};
goog.inherits(proto.casper.ConsumeEventProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.ConsumeEventProto.displayName = 'proto.casper.ConsumeEventProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.CommEventProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.CommEventProto.repeatedFields_, null);
};
goog.inherits(proto.casper.CommEventProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.CommEventProto.displayName = 'proto.casper.CommEventProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.PeekProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.PeekProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.PeekProto.displayName = 'proto.casper.PeekProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BondProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BondProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.BondProto.displayName = 'proto.casper.BondProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.StoreNodeKeyProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.StoreNodeKeyProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.StoreNodeKeyProto.displayName = 'proto.casper.StoreNodeKeyProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.StoreItemsMessageRequestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.StoreItemsMessageRequestProto.repeatedFields_, null);
};
goog.inherits(proto.casper.StoreItemsMessageRequestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.StoreItemsMessageRequestProto.displayName = 'proto.casper.StoreItemsMessageRequestProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.StoreItemProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.StoreItemProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.StoreItemProto.displayName = 'proto.casper.StoreItemProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.StoreItemsMessageProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.StoreItemsMessageProto.repeatedFields_, null);
};
goog.inherits(proto.casper.StoreItemsMessageProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.casper.StoreItemsMessageProto.displayName = 'proto.casper.StoreItemsMessageProto';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.HasBlockRequestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.HasBlockRequestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.HasBlockRequestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HasBlockRequestProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.fetchHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.HasBlockRequestProto}
 */
proto.casper.HasBlockRequestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.HasBlockRequestProto;
  return proto.casper.HasBlockRequestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.HasBlockRequestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.HasBlockRequestProto}
 */
proto.casper.HasBlockRequestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.HasBlockRequestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.HasBlockRequestProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.HasBlockRequestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HasBlockRequestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.casper.HasBlockRequestProto.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {string}
 */
proto.casper.HasBlockRequestProto.prototype.fetchHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {!Uint8Array}
 */
proto.casper.HasBlockRequestProto.prototype.fetchHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.HasBlockRequestProto} returns this
 */
proto.casper.HasBlockRequestProto.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.HasBlockProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.HasBlockProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.HasBlockProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HasBlockProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.fetchHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.HasBlockProto}
 */
proto.casper.HasBlockProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.HasBlockProto;
  return proto.casper.HasBlockProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.HasBlockProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.HasBlockProto}
 */
proto.casper.HasBlockProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.HasBlockProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.HasBlockProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.HasBlockProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HasBlockProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.casper.HasBlockProto.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {string}
 */
proto.casper.HasBlockProto.prototype.fetchHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {!Uint8Array}
 */
proto.casper.HasBlockProto.prototype.fetchHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.HasBlockProto} returns this
 */
proto.casper.HasBlockProto.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockRequestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockRequestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockRequestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockRequestProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.fetchHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockRequestProto}
 */
proto.casper.BlockRequestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockRequestProto;
  return proto.casper.BlockRequestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockRequestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockRequestProto}
 */
proto.casper.BlockRequestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockRequestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockRequestProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockRequestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockRequestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.casper.BlockRequestProto.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {string}
 */
proto.casper.BlockRequestProto.prototype.fetchHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {!Uint8Array}
 */
proto.casper.BlockRequestProto.prototype.fetchHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockRequestProto} returns this
 */
proto.casper.BlockRequestProto.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ForkChoiceTipRequestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ForkChoiceTipRequestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ForkChoiceTipRequestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ForkChoiceTipRequestProto.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ForkChoiceTipRequestProto}
 */
proto.casper.ForkChoiceTipRequestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ForkChoiceTipRequestProto;
  return proto.casper.ForkChoiceTipRequestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ForkChoiceTipRequestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ForkChoiceTipRequestProto}
 */
proto.casper.ForkChoiceTipRequestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ForkChoiceTipRequestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ForkChoiceTipRequestProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ForkChoiceTipRequestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ForkChoiceTipRequestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ApprovedBlockCandidateProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ApprovedBlockCandidateProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockCandidateProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.fetchBlock()) && proto.casper.BlockMessageProto.toObject(includeInstance, f),
    requiredsigs: jspb.Message.fetchFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.ApprovedBlockCandidateProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ApprovedBlockCandidateProto;
  return proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ApprovedBlockCandidateProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.BlockMessageProto;
      reader.readMessage(value,proto.casper.BlockMessageProto.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequiredsigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ApprovedBlockCandidateProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.BlockMessageProto.serializeBinaryToWriter
    );
  }
  f = message.fetchRequiredsigs();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional BlockMessageProto block = 1;
 * @return {?proto.casper.BlockMessageProto}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.fetchBlock = function() {
  return /** @type{?proto.casper.BlockMessageProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.BlockMessageProto, 1));
};


/**
 * @param {?proto.casper.BlockMessageProto|undefined} value
 * @return {!proto.casper.ApprovedBlockCandidateProto} returns this
*/
proto.casper.ApprovedBlockCandidateProto.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ApprovedBlockCandidateProto} returns this
 */
proto.casper.ApprovedBlockCandidateProto.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.hasBlock = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * optional int32 requiredSigs = 2;
 * @return {number}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.fetchRequiredsigs = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.ApprovedBlockCandidateProto} returns this
 */
proto.casper.ApprovedBlockCandidateProto.prototype.setRequiredsigs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.UnapprovedBlockProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.UnapprovedBlockProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.UnapprovedBlockProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.UnapprovedBlockProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.fetchCandidate()) && proto.casper.ApprovedBlockCandidateProto.toObject(includeInstance, f),
    timestamp: jspb.Message.fetchFieldWithDefault(msg, 2, 0),
    duration: jspb.Message.fetchFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.UnapprovedBlockProto}
 */
proto.casper.UnapprovedBlockProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.UnapprovedBlockProto;
  return proto.casper.UnapprovedBlockProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.UnapprovedBlockProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.UnapprovedBlockProto}
 */
proto.casper.UnapprovedBlockProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ApprovedBlockCandidateProto;
      reader.readMessage(value,proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.UnapprovedBlockProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.UnapprovedBlockProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.UnapprovedBlockProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.UnapprovedBlockProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter
    );
  }
  f = message.fetchTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.fetchDuration();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional ApprovedBlockCandidateProto candidate = 1;
 * @return {?proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.UnapprovedBlockProto.prototype.fetchCandidate = function() {
  return /** @type{?proto.casper.ApprovedBlockCandidateProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ApprovedBlockCandidateProto, 1));
};


/**
 * @param {?proto.casper.ApprovedBlockCandidateProto|undefined} value
 * @return {!proto.casper.UnapprovedBlockProto} returns this
*/
proto.casper.UnapprovedBlockProto.prototype.setCandidate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.UnapprovedBlockProto} returns this
 */
proto.casper.UnapprovedBlockProto.prototype.clearCandidate = function() {
  return this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.UnapprovedBlockProto.prototype.hasCandidate = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.casper.UnapprovedBlockProto.prototype.fetchTimestamp = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.UnapprovedBlockProto} returns this
 */
proto.casper.UnapprovedBlockProto.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 duration = 3;
 * @return {number}
 */
proto.casper.UnapprovedBlockProto.prototype.fetchDuration = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.UnapprovedBlockProto} returns this
 */
proto.casper.UnapprovedBlockProto.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickey: msg.fetchPublickey_asB64(),
    algorithm: jspb.Message.fetchFieldWithDefault(msg, 2, ""),
    sig: msg.fetchSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.Signature}
 */
proto.casper.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.Signature;
  return proto.casper.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.Signature}
 */
proto.casper.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.Signature.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.fetchSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes publicKey = 1;
 * @return {string}
 */
proto.casper.Signature.prototype.fetchPublickey = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes publicKey = 1;
 * This is a type-conversion wrapper around `fetchPublickey()`
 * @return {string}
 */
proto.casper.Signature.prototype.fetchPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchPublickey()));
};


/**
 * optional bytes publicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchPublickey()`
 * @return {!Uint8Array}
 */
proto.casper.Signature.prototype.fetchPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.Signature} returns this
 */
proto.casper.Signature.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string algorithm = 2;
 * @return {string}
 */
proto.casper.Signature.prototype.fetchAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.Signature} returns this
 */
proto.casper.Signature.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes sig = 3;
 * @return {string}
 */
proto.casper.Signature.prototype.fetchSig = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig = 3;
 * This is a type-conversion wrapper around `fetchSig()`
 * @return {string}
 */
proto.casper.Signature.prototype.fetchSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchSig()));
};


/**
 * optional bytes sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchSig()`
 * @return {!Uint8Array}
 */
proto.casper.Signature.prototype.fetchSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.Signature} returns this
 */
proto.casper.Signature.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockApprovalProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockApprovalProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockApprovalProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockApprovalProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.fetchCandidate()) && proto.casper.ApprovedBlockCandidateProto.toObject(includeInstance, f),
    sig: (f = msg.fetchSig()) && proto.casper.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockApprovalProto}
 */
proto.casper.BlockApprovalProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockApprovalProto;
  return proto.casper.BlockApprovalProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockApprovalProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockApprovalProto}
 */
proto.casper.BlockApprovalProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ApprovedBlockCandidateProto;
      reader.readMessage(value,proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = new proto.casper.Signature;
      reader.readMessage(value,proto.casper.Signature.deserializeBinaryFromReader);
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockApprovalProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockApprovalProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockApprovalProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockApprovalProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter
    );
  }
  f = message.fetchSig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApprovedBlockCandidateProto candidate = 1;
 * @return {?proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.BlockApprovalProto.prototype.fetchCandidate = function() {
  return /** @type{?proto.casper.ApprovedBlockCandidateProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ApprovedBlockCandidateProto, 1));
};


/**
 * @param {?proto.casper.ApprovedBlockCandidateProto|undefined} value
 * @return {!proto.casper.BlockApprovalProto} returns this
*/
proto.casper.BlockApprovalProto.prototype.setCandidate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.BlockApprovalProto} returns this
 */
proto.casper.BlockApprovalProto.prototype.clearCandidate = function() {
  return this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockApprovalProto.prototype.hasCandidate = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * optional Signature sig = 2;
 * @return {?proto.casper.Signature}
 */
proto.casper.BlockApprovalProto.prototype.fetchSig = function() {
  return /** @type{?proto.casper.Signature} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.Signature, 2));
};


/**
 * @param {?proto.casper.Signature|undefined} value
 * @return {!proto.casper.BlockApprovalProto} returns this
*/
proto.casper.BlockApprovalProto.prototype.setSig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.BlockApprovalProto} returns this
 */
proto.casper.BlockApprovalProto.prototype.clearSig = function() {
  return this.setSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockApprovalProto.prototype.hasSig = function() {
  return jspb.Message.fetchField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ApprovedBlockProto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ApprovedBlockProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ApprovedBlockProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ApprovedBlockProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.fetchCandidate()) && proto.casper.ApprovedBlockCandidateProto.toObject(includeInstance, f),
    sigsList: jspb.Message.toObjectList(msg.fetchSigsList(),
    proto.casper.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ApprovedBlockProto}
 */
proto.casper.ApprovedBlockProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ApprovedBlockProto;
  return proto.casper.ApprovedBlockProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ApprovedBlockProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ApprovedBlockProto}
 */
proto.casper.ApprovedBlockProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ApprovedBlockCandidateProto;
      reader.readMessage(value,proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = new proto.casper.Signature;
      reader.readMessage(value,proto.casper.Signature.deserializeBinaryFromReader);
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ApprovedBlockProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ApprovedBlockProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ApprovedBlockProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter
    );
  }
  f = message.fetchSigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApprovedBlockCandidateProto candidate = 1;
 * @return {?proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.ApprovedBlockProto.prototype.fetchCandidate = function() {
  return /** @type{?proto.casper.ApprovedBlockCandidateProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ApprovedBlockCandidateProto, 1));
};


/**
 * @param {?proto.casper.ApprovedBlockCandidateProto|undefined} value
 * @return {!proto.casper.ApprovedBlockProto} returns this
*/
proto.casper.ApprovedBlockProto.prototype.setCandidate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ApprovedBlockProto} returns this
 */
proto.casper.ApprovedBlockProto.prototype.clearCandidate = function() {
  return this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ApprovedBlockProto.prototype.hasCandidate = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * repeated Signature sigs = 2;
 * @return {!Array<!proto.casper.Signature>}
 */
proto.casper.ApprovedBlockProto.prototype.fetchSigsList = function() {
  return /** @type{!Array<!proto.casper.Signature>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.Signature, 2));
};


/**
 * @param {!Array<!proto.casper.Signature>} value
 * @return {!proto.casper.ApprovedBlockProto} returns this
*/
proto.casper.ApprovedBlockProto.prototype.setSigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.Signature}
 */
proto.casper.ApprovedBlockProto.prototype.addSigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.Signature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ApprovedBlockProto} returns this
 */
proto.casper.ApprovedBlockProto.prototype.clearSigsList = function() {
  return this.setSigsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ApprovedBlockRequestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ApprovedBlockRequestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ApprovedBlockRequestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockRequestProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.fetchFieldWithDefault(msg, 1, ""),
    trimstate: jspb.Message.fetchBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ApprovedBlockRequestProto}
 */
proto.casper.ApprovedBlockRequestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ApprovedBlockRequestProto;
  return proto.casper.ApprovedBlockRequestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ApprovedBlockRequestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ApprovedBlockRequestProto}
 */
proto.casper.ApprovedBlockRequestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTrimstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ApprovedBlockRequestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ApprovedBlockRequestProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ApprovedBlockRequestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockRequestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.fetchTrimstate();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.casper.ApprovedBlockRequestProto.prototype.fetchIdentifier = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.ApprovedBlockRequestProto} returns this
 */
proto.casper.ApprovedBlockRequestProto.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool trimState = 2;
 * @return {boolean}
 */
proto.casper.ApprovedBlockRequestProto.prototype.fetchTrimstate = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.ApprovedBlockRequestProto} returns this
 */
proto.casper.ApprovedBlockRequestProto.prototype.setTrimstate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.NoApprovedBlockAvailableProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.NoApprovedBlockAvailableProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.NoApprovedBlockAvailableProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.fetchFieldWithDefault(msg, 1, ""),
    nodeidentifer: jspb.Message.fetchFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.NoApprovedBlockAvailableProto}
 */
proto.casper.NoApprovedBlockAvailableProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.NoApprovedBlockAvailableProto;
  return proto.casper.NoApprovedBlockAvailableProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.NoApprovedBlockAvailableProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.NoApprovedBlockAvailableProto}
 */
proto.casper.NoApprovedBlockAvailableProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeidentifer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.NoApprovedBlockAvailableProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.NoApprovedBlockAvailableProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.NoApprovedBlockAvailableProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.fetchNodeidentifer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.fetchIdentifier = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.NoApprovedBlockAvailableProto} returns this
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nodeIdentifer = 2;
 * @return {string}
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.fetchNodeidentifer = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.NoApprovedBlockAvailableProto} returns this
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.setNodeidentifer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.BlockMessageProto.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockMessageProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockMessageProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockMessageProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockMessageProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: msg.fetchBlockhash_asB64(),
    header: (f = msg.fetchHeader()) && proto.casper.HeaderProto.toObject(includeInstance, f),
    body: (f = msg.fetchBody()) && proto.casper.BodyProto.toObject(includeInstance, f),
    justificationsList: jspb.Message.toObjectList(msg.fetchJustificationsList(),
    proto.casper.JustificationProto.toObject, includeInstance),
    sender: msg.fetchSender_asB64(),
    seqnum: jspb.Message.fetchFieldWithDefault(msg, 6, 0),
    sig: msg.fetchSig_asB64(),
    sigalgorithm: jspb.Message.fetchFieldWithDefault(msg, 8, ""),
    shardid: jspb.Message.fetchFieldWithDefault(msg, 9, ""),
    extrabytes: msg.fetchExtrabytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockMessageProto}
 */
proto.casper.BlockMessageProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockMessageProto;
  return proto.casper.BlockMessageProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockMessageProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockMessageProto}
 */
proto.casper.BlockMessageProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = new proto.casper.HeaderProto;
      reader.readMessage(value,proto.casper.HeaderProto.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.casper.BodyProto;
      reader.readMessage(value,proto.casper.BodyProto.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 4:
      var value = new proto.casper.JustificationProto;
      reader.readMessage(value,proto.casper.JustificationProto.deserializeBinaryFromReader);
      msg.addJustifications(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeqnum(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardid(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockMessageProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockMessageProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockMessageProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.HeaderProto.serializeBinaryToWriter
    );
  }
  f = message.fetchBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.casper.BodyProto.serializeBinaryToWriter
    );
  }
  f = message.fetchJustificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.casper.JustificationProto.serializeBinaryToWriter
    );
  }
  f = message.fetchSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.fetchSeqnum();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.fetchSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.fetchSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.fetchShardid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.fetchExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional bytes blockHash = 1;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchBlockhash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes blockHash = 1;
 * This is a type-conversion wrapper around `fetchBlockhash()`
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchBlockhash()));
};


/**
 * optional bytes blockHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchBlockhash()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.fetchBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchBlockhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.setBlockhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional HeaderProto header = 2;
 * @return {?proto.casper.HeaderProto}
 */
proto.casper.BlockMessageProto.prototype.fetchHeader = function() {
  return /** @type{?proto.casper.HeaderProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.HeaderProto, 2));
};


/**
 * @param {?proto.casper.HeaderProto|undefined} value
 * @return {!proto.casper.BlockMessageProto} returns this
*/
proto.casper.BlockMessageProto.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockMessageProto.prototype.hasHeader = function() {
  return jspb.Message.fetchField(this, 2) != null;
};


/**
 * optional BodyProto body = 3;
 * @return {?proto.casper.BodyProto}
 */
proto.casper.BlockMessageProto.prototype.fetchBody = function() {
  return /** @type{?proto.casper.BodyProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.BodyProto, 3));
};


/**
 * @param {?proto.casper.BodyProto|undefined} value
 * @return {!proto.casper.BlockMessageProto} returns this
*/
proto.casper.BlockMessageProto.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockMessageProto.prototype.hasBody = function() {
  return jspb.Message.fetchField(this, 3) != null;
};


/**
 * repeated JustificationProto justifications = 4;
 * @return {!Array<!proto.casper.JustificationProto>}
 */
proto.casper.BlockMessageProto.prototype.fetchJustificationsList = function() {
  return /** @type{!Array<!proto.casper.JustificationProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.JustificationProto, 4));
};


/**
 * @param {!Array<!proto.casper.JustificationProto>} value
 * @return {!proto.casper.BlockMessageProto} returns this
*/
proto.casper.BlockMessageProto.prototype.setJustificationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.casper.JustificationProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.JustificationProto}
 */
proto.casper.BlockMessageProto.prototype.addJustifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.casper.JustificationProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.clearJustificationsList = function() {
  return this.setJustificationsList([]);
};


/**
 * optional bytes sender = 5;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchSender = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes sender = 5;
 * This is a type-conversion wrapper around `fetchSender()`
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchSender()));
};


/**
 * optional bytes sender = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchSender()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.fetchSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchSender()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.setSender = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional int32 seqNum = 6;
 * @return {number}
 */
proto.casper.BlockMessageProto.prototype.fetchSeqnum = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.setSeqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes sig = 7;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchSig = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes sig = 7;
 * This is a type-conversion wrapper around `fetchSig()`
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchSig()));
};


/**
 * optional bytes sig = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchSig()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.fetchSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string sigAlgorithm = 8;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.setSigalgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string shardId = 9;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchShardid = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.setShardid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bytes extraBytes = 10;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchExtrabytes = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes extraBytes = 10;
 * This is a type-conversion wrapper around `fetchExtrabytes()`
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.fetchExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchExtrabytes()));
};


/**
 * optional bytes extraBytes = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchExtrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.fetchExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchExtrabytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockMessageProto} returns this
 */
proto.casper.BlockMessageProto.prototype.setExtrabytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockHashMessageProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockHashMessageProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockHashMessageProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockHashMessageProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.fetchHash_asB64(),
    blockcreator: msg.fetchBlockcreator_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockHashMessageProto}
 */
proto.casper.BlockHashMessageProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockHashMessageProto;
  return proto.casper.BlockHashMessageProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockHashMessageProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockHashMessageProto}
 */
proto.casper.BlockHashMessageProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockcreator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockHashMessageProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockHashMessageProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockHashMessageProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockHashMessageProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchBlockcreator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.casper.BlockHashMessageProto.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {string}
 */
proto.casper.BlockHashMessageProto.prototype.fetchHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {!Uint8Array}
 */
proto.casper.BlockHashMessageProto.prototype.fetchHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockHashMessageProto} returns this
 */
proto.casper.BlockHashMessageProto.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes blockCreator = 2;
 * @return {string}
 */
proto.casper.BlockHashMessageProto.prototype.fetchBlockcreator = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes blockCreator = 2;
 * This is a type-conversion wrapper around `fetchBlockcreator()`
 * @return {string}
 */
proto.casper.BlockHashMessageProto.prototype.fetchBlockcreator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchBlockcreator()));
};


/**
 * optional bytes blockCreator = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchBlockcreator()`
 * @return {!Uint8Array}
 */
proto.casper.BlockHashMessageProto.prototype.fetchBlockcreator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchBlockcreator()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockHashMessageProto} returns this
 */
proto.casper.BlockHashMessageProto.prototype.setBlockcreator = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.BlockMetadataInternal.repeatedFields_ = [2,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockMetadataInternal.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockMetadataInternal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockMetadataInternal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockMetadataInternal.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: msg.fetchBlockhash_asB64(),
    parentsList: msg.fetchParentsList_asB64(),
    sender: msg.fetchSender_asB64(),
    justificationsList: jspb.Message.toObjectList(msg.fetchJustificationsList(),
    proto.casper.JustificationProto.toObject, includeInstance),
    bondsList: jspb.Message.toObjectList(msg.fetchBondsList(),
    proto.casper.BondProto.toObject, includeInstance),
    blocknum: jspb.Message.fetchFieldWithDefault(msg, 6, 0),
    seqnum: jspb.Message.fetchFieldWithDefault(msg, 7, 0),
    invalid: jspb.Message.fetchBooleanFieldWithDefault(msg, 8, false),
    directlyfinalized: jspb.Message.fetchBooleanFieldWithDefault(msg, 9, false),
    finalized: jspb.Message.fetchBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockMetadataInternal}
 */
proto.casper.BlockMetadataInternal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockMetadataInternal;
  return proto.casper.BlockMetadataInternal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockMetadataInternal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockMetadataInternal}
 */
proto.casper.BlockMetadataInternal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addParents(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 4:
      var value = new proto.casper.JustificationProto;
      reader.readMessage(value,proto.casper.JustificationProto.deserializeBinaryFromReader);
      msg.addJustifications(value);
      break;
    case 5:
      var value = new proto.casper.BondProto;
      reader.readMessage(value,proto.casper.BondProto.deserializeBinaryFromReader);
      msg.addBonds(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknum(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeqnum(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInvalid(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDirectlyfinalized(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFinalized(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockMetadataInternal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockMetadataInternal.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockMetadataInternal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockMetadataInternal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchParentsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.fetchSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.fetchJustificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.casper.JustificationProto.serializeBinaryToWriter
    );
  }
  f = message.fetchBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.casper.BondProto.serializeBinaryToWriter
    );
  }
  f = message.fetchBlocknum();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.fetchSeqnum();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.fetchInvalid();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.fetchDirectlyfinalized();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.fetchFinalized();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional bytes blockHash = 1;
 * @return {string}
 */
proto.casper.BlockMetadataInternal.prototype.fetchBlockhash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes blockHash = 1;
 * This is a type-conversion wrapper around `fetchBlockhash()`
 * @return {string}
 */
proto.casper.BlockMetadataInternal.prototype.fetchBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchBlockhash()));
};


/**
 * optional bytes blockHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchBlockhash()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMetadataInternal.prototype.fetchBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchBlockhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.setBlockhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes parents = 2;
 * @return {!Array<string>}
 */
proto.casper.BlockMetadataInternal.prototype.fetchParentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.fetchRepeatedField(this, 2));
};


/**
 * repeated bytes parents = 2;
 * This is a type-conversion wrapper around `fetchParentsList()`
 * @return {!Array<string>}
 */
proto.casper.BlockMetadataInternal.prototype.fetchParentsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.fetchParentsList()));
};


/**
 * repeated bytes parents = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchParentsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.casper.BlockMetadataInternal.prototype.fetchParentsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.fetchParentsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.setParentsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.addParents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.clearParentsList = function() {
  return this.setParentsList([]);
};


/**
 * optional bytes sender = 3;
 * @return {string}
 */
proto.casper.BlockMetadataInternal.prototype.fetchSender = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sender = 3;
 * This is a type-conversion wrapper around `fetchSender()`
 * @return {string}
 */
proto.casper.BlockMetadataInternal.prototype.fetchSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchSender()));
};


/**
 * optional bytes sender = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchSender()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMetadataInternal.prototype.fetchSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchSender()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.setSender = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated JustificationProto justifications = 4;
 * @return {!Array<!proto.casper.JustificationProto>}
 */
proto.casper.BlockMetadataInternal.prototype.fetchJustificationsList = function() {
  return /** @type{!Array<!proto.casper.JustificationProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.JustificationProto, 4));
};


/**
 * @param {!Array<!proto.casper.JustificationProto>} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
*/
proto.casper.BlockMetadataInternal.prototype.setJustificationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.casper.JustificationProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.JustificationProto}
 */
proto.casper.BlockMetadataInternal.prototype.addJustifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.casper.JustificationProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.clearJustificationsList = function() {
  return this.setJustificationsList([]);
};


/**
 * repeated BondProto bonds = 5;
 * @return {!Array<!proto.casper.BondProto>}
 */
proto.casper.BlockMetadataInternal.prototype.fetchBondsList = function() {
  return /** @type{!Array<!proto.casper.BondProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.BondProto, 5));
};


/**
 * @param {!Array<!proto.casper.BondProto>} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
*/
proto.casper.BlockMetadataInternal.prototype.setBondsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.casper.BondProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.BondProto}
 */
proto.casper.BlockMetadataInternal.prototype.addBonds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.casper.BondProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.clearBondsList = function() {
  return this.setBondsList([]);
};


/**
 * optional int64 blockNum = 6;
 * @return {number}
 */
proto.casper.BlockMetadataInternal.prototype.fetchBlocknum = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.setBlocknum = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 seqNum = 7;
 * @return {number}
 */
proto.casper.BlockMetadataInternal.prototype.fetchSeqnum = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.setSeqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool invalid = 8;
 * @return {boolean}
 */
proto.casper.BlockMetadataInternal.prototype.fetchInvalid = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.setInvalid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool directlyFinalized = 9;
 * @return {boolean}
 */
proto.casper.BlockMetadataInternal.prototype.fetchDirectlyfinalized = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.setDirectlyfinalized = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool finalized = 10;
 * @return {boolean}
 */
proto.casper.BlockMetadataInternal.prototype.fetchFinalized = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.BlockMetadataInternal} returns this
 */
proto.casper.BlockMetadataInternal.prototype.setFinalized = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.HeaderProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.HeaderProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.HeaderProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.HeaderProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HeaderProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentshashlistList: msg.fetchParentshashlistList_asB64(),
    timestamp: jspb.Message.fetchFieldWithDefault(msg, 5, 0),
    version: jspb.Message.fetchFieldWithDefault(msg, 6, 0),
    extrabytes: msg.fetchExtrabytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.HeaderProto}
 */
proto.casper.HeaderProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.HeaderProto;
  return proto.casper.HeaderProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.HeaderProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.HeaderProto}
 */
proto.casper.HeaderProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addParentshashlist(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.HeaderProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.HeaderProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.HeaderProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HeaderProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchParentshashlistList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.fetchTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.fetchVersion();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.fetchExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * repeated bytes parentsHashList = 1;
 * @return {!Array<string>}
 */
proto.casper.HeaderProto.prototype.fetchParentshashlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.fetchRepeatedField(this, 1));
};


/**
 * repeated bytes parentsHashList = 1;
 * This is a type-conversion wrapper around `fetchParentshashlistList()`
 * @return {!Array<string>}
 */
proto.casper.HeaderProto.prototype.fetchParentshashlistList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.fetchParentshashlistList()));
};


/**
 * repeated bytes parentsHashList = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchParentshashlistList()`
 * @return {!Array<!Uint8Array>}
 */
proto.casper.HeaderProto.prototype.fetchParentshashlistList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.fetchParentshashlistList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.casper.HeaderProto} returns this
 */
proto.casper.HeaderProto.prototype.setParentshashlistList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.casper.HeaderProto} returns this
 */
proto.casper.HeaderProto.prototype.addParentshashlist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.HeaderProto} returns this
 */
proto.casper.HeaderProto.prototype.clearParentshashlistList = function() {
  return this.setParentshashlistList([]);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.casper.HeaderProto.prototype.fetchTimestamp = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.HeaderProto} returns this
 */
proto.casper.HeaderProto.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 version = 6;
 * @return {number}
 */
proto.casper.HeaderProto.prototype.fetchVersion = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.HeaderProto} returns this
 */
proto.casper.HeaderProto.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes extraBytes = 7;
 * @return {string}
 */
proto.casper.HeaderProto.prototype.fetchExtrabytes = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes extraBytes = 7;
 * This is a type-conversion wrapper around `fetchExtrabytes()`
 * @return {string}
 */
proto.casper.HeaderProto.prototype.fetchExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchExtrabytes()));
};


/**
 * optional bytes extraBytes = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchExtrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.HeaderProto.prototype.fetchExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchExtrabytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.HeaderProto} returns this
 */
proto.casper.HeaderProto.prototype.setExtrabytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.dpDataProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.dpDataProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.dpDataProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.dpDataProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    dper: msg.fetchdper_asB64(),
    term: jspb.Message.fetchFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.fetchFieldWithDefault(msg, 3, 0),
    sig: msg.fetchSig_asB64(),
    sigalgorithm: jspb.Message.fetchFieldWithDefault(msg, 5, ""),
    phloprice: jspb.Message.fetchFieldWithDefault(msg, 7, 0),
    phlolimit: jspb.Message.fetchFieldWithDefault(msg, 8, 0),
    validafterblocknumber: jspb.Message.fetchFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.dpDataProto}
 */
proto.casper.dpDataProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.dpDataProto;
  return proto.casper.dpDataProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.dpDataProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.dpDataProto}
 */
proto.casper.dpDataProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setdper(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhloprice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhlolimit(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidafterblocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.dpDataProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.dpDataProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.dpDataProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.dpDataProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchdper_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchTerm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.fetchTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.fetchSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.fetchSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.fetchPhloprice();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.fetchPhlolimit();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.fetchValidafterblocknumber();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional bytes dper = 1;
 * @return {string}
 */
proto.casper.dpDataProto.prototype.fetchdper = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dper = 1;
 * This is a type-conversion wrapper around `fetchdper()`
 * @return {string}
 */
proto.casper.dpDataProto.prototype.fetchdper_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchdper()));
};


/**
 * optional bytes dper = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchdper()`
 * @return {!Uint8Array}
 */
proto.casper.dpDataProto.prototype.fetchdper_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchdper()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.dpDataProto} returns this
 */
proto.casper.dpDataProto.prototype.setdper = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string term = 2;
 * @return {string}
 */
proto.casper.dpDataProto.prototype.fetchTerm = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.dpDataProto} returns this
 */
proto.casper.dpDataProto.prototype.setTerm = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.casper.dpDataProto.prototype.fetchTimestamp = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.dpDataProto} returns this
 */
proto.casper.dpDataProto.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes sig = 4;
 * @return {string}
 */
proto.casper.dpDataProto.prototype.fetchSig = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes sig = 4;
 * This is a type-conversion wrapper around `fetchSig()`
 * @return {string}
 */
proto.casper.dpDataProto.prototype.fetchSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchSig()));
};


/**
 * optional bytes sig = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchSig()`
 * @return {!Uint8Array}
 */
proto.casper.dpDataProto.prototype.fetchSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.dpDataProto} returns this
 */
proto.casper.dpDataProto.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string sigAlgorithm = 5;
 * @return {string}
 */
proto.casper.dpDataProto.prototype.fetchSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.dpDataProto} returns this
 */
proto.casper.dpDataProto.prototype.setSigalgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 phloPrice = 7;
 * @return {number}
 */
proto.casper.dpDataProto.prototype.fetchPhloprice = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.dpDataProto} returns this
 */
proto.casper.dpDataProto.prototype.setPhloprice = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 phloLimit = 8;
 * @return {number}
 */
proto.casper.dpDataProto.prototype.fetchPhlolimit = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.dpDataProto} returns this
 */
proto.casper.dpDataProto.prototype.setPhlolimit = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 validAfterBlockNumber = 10;
 * @return {number}
 */
proto.casper.dpDataProto.prototype.fetchValidafterblocknumber = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.dpDataProto} returns this
 */
proto.casper.dpDataProto.prototype.setValidafterblocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ProcesseddpProto.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ProcesseddpProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ProcesseddpProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ProcesseddpProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProcesseddpProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    dp: (f = msg.fetchdp()) && proto.casper.dpDataProto.toObject(includeInstance, f),
    cost: (f = msg.fetchCost()) && RhoTypes_pb.PCost.toObject(includeInstance, f),
    dplogList: jspb.Message.toObjectList(msg.fetchdplogList(),
    proto.casper.EventProto.toObject, includeInstance),
    errored: jspb.Message.fetchBooleanFieldWithDefault(msg, 5, false),
    systemdperror: jspb.Message.fetchFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ProcesseddpProto}
 */
proto.casper.ProcesseddpProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ProcesseddpProto;
  return proto.casper.ProcesseddpProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ProcesseddpProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ProcesseddpProto}
 */
proto.casper.ProcesseddpProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.dpDataProto;
      reader.readMessage(value,proto.casper.dpDataProto.deserializeBinaryFromReader);
      msg.setdp(value);
      break;
    case 2:
      var value = new RhoTypes_pb.PCost;
      reader.readMessage(value,RhoTypes_pb.PCost.deserializeBinaryFromReader);
      msg.setCost(value);
      break;
    case 3:
      var value = new proto.casper.EventProto;
      reader.readMessage(value,proto.casper.EventProto.deserializeBinaryFromReader);
      msg.adddplog(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setErrored(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemdperror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ProcesseddpProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ProcesseddpProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ProcesseddpProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProcesseddpProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchdp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.dpDataProto.serializeBinaryToWriter
    );
  }
  f = message.fetchCost();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.PCost.serializeBinaryToWriter
    );
  }
  f = message.fetchdplogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.casper.EventProto.serializeBinaryToWriter
    );
  }
  f = message.fetchErrored();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.fetchSystemdperror();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional dpDataProto dp = 1;
 * @return {?proto.casper.dpDataProto}
 */
proto.casper.ProcesseddpProto.prototype.fetchdp = function() {
  return /** @type{?proto.casper.dpDataProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.dpDataProto, 1));
};


/**
 * @param {?proto.casper.dpDataProto|undefined} value
 * @return {!proto.casper.ProcesseddpProto} returns this
*/
proto.casper.ProcesseddpProto.prototype.setdp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ProcesseddpProto} returns this
 */
proto.casper.ProcesseddpProto.prototype.cleardp = function() {
  return this.setdp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ProcesseddpProto.prototype.hasdp = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * optional PCost cost = 2;
 * @return {?proto.PCost}
 */
proto.casper.ProcesseddpProto.prototype.fetchCost = function() {
  return /** @type{?proto.PCost} */ (
    jspb.Message.fetchWrapperField(this, RhoTypes_pb.PCost, 2));
};


/**
 * @param {?proto.PCost|undefined} value
 * @return {!proto.casper.ProcesseddpProto} returns this
*/
proto.casper.ProcesseddpProto.prototype.setCost = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ProcesseddpProto} returns this
 */
proto.casper.ProcesseddpProto.prototype.clearCost = function() {
  return this.setCost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ProcesseddpProto.prototype.hasCost = function() {
  return jspb.Message.fetchField(this, 2) != null;
};


/**
 * repeated EventProto dpLog = 3;
 * @return {!Array<!proto.casper.EventProto>}
 */
proto.casper.ProcesseddpProto.prototype.fetchdplogList = function() {
  return /** @type{!Array<!proto.casper.EventProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.EventProto, 3));
};


/**
 * @param {!Array<!proto.casper.EventProto>} value
 * @return {!proto.casper.ProcesseddpProto} returns this
*/
proto.casper.ProcesseddpProto.prototype.setdplogList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.casper.EventProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.EventProto}
 */
proto.casper.ProcesseddpProto.prototype.adddplog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.casper.EventProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ProcesseddpProto} returns this
 */
proto.casper.ProcesseddpProto.prototype.cleardplogList = function() {
  return this.setdplogList([]);
};


/**
 * optional bool errored = 5;
 * @return {boolean}
 */
proto.casper.ProcesseddpProto.prototype.fetchErrored = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.ProcesseddpProto} returns this
 */
proto.casper.ProcesseddpProto.prototype.setErrored = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string systemdpError = 6;
 * @return {string}
 */
proto.casper.ProcesseddpProto.prototype.fetchSystemdperror = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.ProcesseddpProto} returns this
 */
proto.casper.ProcesseddpProto.prototype.setSystemdperror = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.SlashSystemdpDataProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.SlashSystemdpDataProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.SlashSystemdpDataProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.SlashSystemdpDataProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    invalidblockhash: msg.fetchInvalidblockhash_asB64(),
    issuerpublickey: msg.fetchIssuerpublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.SlashSystemdpDataProto}
 */
proto.casper.SlashSystemdpDataProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.SlashSystemdpDataProto;
  return proto.casper.SlashSystemdpDataProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.SlashSystemdpDataProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.SlashSystemdpDataProto}
 */
proto.casper.SlashSystemdpDataProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInvalidblockhash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIssuerpublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.SlashSystemdpDataProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.SlashSystemdpDataProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.SlashSystemdpDataProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.SlashSystemdpDataProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchInvalidblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchIssuerpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes invalidBlockHash = 1;
 * @return {string}
 */
proto.casper.SlashSystemdpDataProto.prototype.fetchInvalidblockhash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes invalidBlockHash = 1;
 * This is a type-conversion wrapper around `fetchInvalidblockhash()`
 * @return {string}
 */
proto.casper.SlashSystemdpDataProto.prototype.fetchInvalidblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchInvalidblockhash()));
};


/**
 * optional bytes invalidBlockHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchInvalidblockhash()`
 * @return {!Uint8Array}
 */
proto.casper.SlashSystemdpDataProto.prototype.fetchInvalidblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchInvalidblockhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.SlashSystemdpDataProto} returns this
 */
proto.casper.SlashSystemdpDataProto.prototype.setInvalidblockhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes issuerPublicKey = 2;
 * @return {string}
 */
proto.casper.SlashSystemdpDataProto.prototype.fetchIssuerpublickey = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes issuerPublicKey = 2;
 * This is a type-conversion wrapper around `fetchIssuerpublickey()`
 * @return {string}
 */
proto.casper.SlashSystemdpDataProto.prototype.fetchIssuerpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchIssuerpublickey()));
};


/**
 * optional bytes issuerPublicKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchIssuerpublickey()`
 * @return {!Uint8Array}
 */
proto.casper.SlashSystemdpDataProto.prototype.fetchIssuerpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchIssuerpublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.SlashSystemdpDataProto} returns this
 */
proto.casper.SlashSystemdpDataProto.prototype.setIssuerpublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.CloseBlockSystemdpDataProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.CloseBlockSystemdpDataProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.CloseBlockSystemdpDataProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.CloseBlockSystemdpDataProto.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.CloseBlockSystemdpDataProto}
 */
proto.casper.CloseBlockSystemdpDataProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.CloseBlockSystemdpDataProto;
  return proto.casper.CloseBlockSystemdpDataProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.CloseBlockSystemdpDataProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.CloseBlockSystemdpDataProto}
 */
proto.casper.CloseBlockSystemdpDataProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.CloseBlockSystemdpDataProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.CloseBlockSystemdpDataProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.CloseBlockSystemdpDataProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.CloseBlockSystemdpDataProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.casper.SystemdpDataProto.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.casper.SystemdpDataProto.SystemdpCase = {
  SYSTEMdp_NOT_SET: 0,
  SLASHSYSTEMdp: 1,
  CLOSEBLOCKSYSTEMdp: 2
};

/**
 * @return {proto.casper.SystemdpDataProto.SystemdpCase}
 */
proto.casper.SystemdpDataProto.prototype.fetchSystemdpCase = function() {
  return /** @type {proto.casper.SystemdpDataProto.SystemdpCase} */(jspb.Message.computeOneofCase(this, proto.casper.SystemdpDataProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.SystemdpDataProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.SystemdpDataProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.SystemdpDataProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.SystemdpDataProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    slashsystemdp: (f = msg.fetchSlashsystemdp()) && proto.casper.SlashSystemdpDataProto.toObject(includeInstance, f),
    closeblocksystemdp: (f = msg.fetchCloseblocksystemdp()) && proto.casper.CloseBlockSystemdpDataProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.SystemdpDataProto}
 */
proto.casper.SystemdpDataProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.SystemdpDataProto;
  return proto.casper.SystemdpDataProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.SystemdpDataProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.SystemdpDataProto}
 */
proto.casper.SystemdpDataProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.SlashSystemdpDataProto;
      reader.readMessage(value,proto.casper.SlashSystemdpDataProto.deserializeBinaryFromReader);
      msg.setSlashsystemdp(value);
      break;
    case 2:
      var value = new proto.casper.CloseBlockSystemdpDataProto;
      reader.readMessage(value,proto.casper.CloseBlockSystemdpDataProto.deserializeBinaryFromReader);
      msg.setCloseblocksystemdp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.SystemdpDataProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.SystemdpDataProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.SystemdpDataProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.SystemdpDataProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchSlashsystemdp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.SlashSystemdpDataProto.serializeBinaryToWriter
    );
  }
  f = message.fetchCloseblocksystemdp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.CloseBlockSystemdpDataProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional SlashSystemdpDataProto slashSystemdp = 1;
 * @return {?proto.casper.SlashSystemdpDataProto}
 */
proto.casper.SystemdpDataProto.prototype.fetchSlashsystemdp = function() {
  return /** @type{?proto.casper.SlashSystemdpDataProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.SlashSystemdpDataProto, 1));
};


/**
 * @param {?proto.casper.SlashSystemdpDataProto|undefined} value
 * @return {!proto.casper.SystemdpDataProto} returns this
*/
proto.casper.SystemdpDataProto.prototype.setSlashsystemdp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.casper.SystemdpDataProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.SystemdpDataProto} returns this
 */
proto.casper.SystemdpDataProto.prototype.clearSlashsystemdp = function() {
  return this.setSlashsystemdp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.SystemdpDataProto.prototype.hasSlashsystemdp = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * optional CloseBlockSystemdpDataProto closeBlockSystemdp = 2;
 * @return {?proto.casper.CloseBlockSystemdpDataProto}
 */
proto.casper.SystemdpDataProto.prototype.fetchCloseblocksystemdp = function() {
  return /** @type{?proto.casper.CloseBlockSystemdpDataProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.CloseBlockSystemdpDataProto, 2));
};


/**
 * @param {?proto.casper.CloseBlockSystemdpDataProto|undefined} value
 * @return {!proto.casper.SystemdpDataProto} returns this
*/
proto.casper.SystemdpDataProto.prototype.setCloseblocksystemdp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.casper.SystemdpDataProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.SystemdpDataProto} returns this
 */
proto.casper.SystemdpDataProto.prototype.clearCloseblocksystemdp = function() {
  return this.setCloseblocksystemdp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.SystemdpDataProto.prototype.hasCloseblocksystemdp = function() {
  return jspb.Message.fetchField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ProcessedSystemdpProto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ProcessedSystemdpProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ProcessedSystemdpProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ProcessedSystemdpProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProcessedSystemdpProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemdp: (f = msg.fetchSystemdp()) && proto.casper.SystemdpDataProto.toObject(includeInstance, f),
    dplogList: jspb.Message.toObjectList(msg.fetchdplogList(),
    proto.casper.EventProto.toObject, includeInstance),
    errormsg: jspb.Message.fetchFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ProcessedSystemdpProto}
 */
proto.casper.ProcessedSystemdpProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ProcessedSystemdpProto;
  return proto.casper.ProcessedSystemdpProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ProcessedSystemdpProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ProcessedSystemdpProto}
 */
proto.casper.ProcessedSystemdpProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.SystemdpDataProto;
      reader.readMessage(value,proto.casper.SystemdpDataProto.deserializeBinaryFromReader);
      msg.setSystemdp(value);
      break;
    case 2:
      var value = new proto.casper.EventProto;
      reader.readMessage(value,proto.casper.EventProto.deserializeBinaryFromReader);
      msg.adddplog(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ProcessedSystemdpProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ProcessedSystemdpProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ProcessedSystemdpProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProcessedSystemdpProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchSystemdp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.SystemdpDataProto.serializeBinaryToWriter
    );
  }
  f = message.fetchdplogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.EventProto.serializeBinaryToWriter
    );
  }
  f = message.fetchErrormsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional SystemdpDataProto systemdp = 1;
 * @return {?proto.casper.SystemdpDataProto}
 */
proto.casper.ProcessedSystemdpProto.prototype.fetchSystemdp = function() {
  return /** @type{?proto.casper.SystemdpDataProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.SystemdpDataProto, 1));
};


/**
 * @param {?proto.casper.SystemdpDataProto|undefined} value
 * @return {!proto.casper.ProcessedSystemdpProto} returns this
*/
proto.casper.ProcessedSystemdpProto.prototype.setSystemdp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.ProcessedSystemdpProto} returns this
 */
proto.casper.ProcessedSystemdpProto.prototype.clearSystemdp = function() {
  return this.setSystemdp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ProcessedSystemdpProto.prototype.hasSystemdp = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * repeated EventProto dpLog = 2;
 * @return {!Array<!proto.casper.EventProto>}
 */
proto.casper.ProcessedSystemdpProto.prototype.fetchdplogList = function() {
  return /** @type{!Array<!proto.casper.EventProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.EventProto, 2));
};


/**
 * @param {!Array<!proto.casper.EventProto>} value
 * @return {!proto.casper.ProcessedSystemdpProto} returns this
*/
proto.casper.ProcessedSystemdpProto.prototype.setdplogList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.EventProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.EventProto}
 */
proto.casper.ProcessedSystemdpProto.prototype.adddplog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.EventProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ProcessedSystemdpProto} returns this
 */
proto.casper.ProcessedSystemdpProto.prototype.cleardplogList = function() {
  return this.setdplogList([]);
};


/**
 * optional string errorMsg = 3;
 * @return {string}
 */
proto.casper.ProcessedSystemdpProto.prototype.fetchErrormsg = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.casper.ProcessedSystemdpProto} returns this
 */
proto.casper.ProcessedSystemdpProto.prototype.setErrormsg = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.BodyProto.repeatedFields_ = [2,3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BodyProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BodyProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BodyProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BodyProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.fetchState()) && proto.casper.RChainStateProto.toObject(includeInstance, f),
    dpsList: jspb.Message.toObjectList(msg.fetchdpsList(),
    proto.casper.ProcesseddpProto.toObject, includeInstance),
    systemdpsList: jspb.Message.toObjectList(msg.fetchSystemdpsList(),
    proto.casper.ProcessedSystemdpProto.toObject, includeInstance),
    extrabytes: msg.fetchExtrabytes_asB64(),
    rejecteddpsList: jspb.Message.toObjectList(msg.fetchRejecteddpsList(),
    proto.casper.RejecteddpProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BodyProto}
 */
proto.casper.BodyProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BodyProto;
  return proto.casper.BodyProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BodyProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BodyProto}
 */
proto.casper.BodyProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.RChainStateProto;
      reader.readMessage(value,proto.casper.RChainStateProto.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.casper.ProcesseddpProto;
      reader.readMessage(value,proto.casper.ProcesseddpProto.deserializeBinaryFromReader);
      msg.adddps(value);
      break;
    case 3:
      var value = new proto.casper.ProcessedSystemdpProto;
      reader.readMessage(value,proto.casper.ProcessedSystemdpProto.deserializeBinaryFromReader);
      msg.addSystemdps(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    case 5:
      var value = new proto.casper.RejecteddpProto;
      reader.readMessage(value,proto.casper.RejecteddpProto.deserializeBinaryFromReader);
      msg.addRejecteddps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BodyProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BodyProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BodyProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BodyProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.RChainStateProto.serializeBinaryToWriter
    );
  }
  f = message.fetchdpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.ProcesseddpProto.serializeBinaryToWriter
    );
  }
  f = message.fetchSystemdpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.casper.ProcessedSystemdpProto.serializeBinaryToWriter
    );
  }
  f = message.fetchExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.fetchRejecteddpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.casper.RejecteddpProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional RChainStateProto state = 1;
 * @return {?proto.casper.RChainStateProto}
 */
proto.casper.BodyProto.prototype.fetchState = function() {
  return /** @type{?proto.casper.RChainStateProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.RChainStateProto, 1));
};


/**
 * @param {?proto.casper.RChainStateProto|undefined} value
 * @return {!proto.casper.BodyProto} returns this
*/
proto.casper.BodyProto.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.BodyProto} returns this
 */
proto.casper.BodyProto.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BodyProto.prototype.hasState = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * repeated ProcesseddpProto dps = 2;
 * @return {!Array<!proto.casper.ProcesseddpProto>}
 */
proto.casper.BodyProto.prototype.fetchdpsList = function() {
  return /** @type{!Array<!proto.casper.ProcesseddpProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.ProcesseddpProto, 2));
};


/**
 * @param {!Array<!proto.casper.ProcesseddpProto>} value
 * @return {!proto.casper.BodyProto} returns this
*/
proto.casper.BodyProto.prototype.setdpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.ProcesseddpProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.ProcesseddpProto}
 */
proto.casper.BodyProto.prototype.adddps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.ProcesseddpProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BodyProto} returns this
 */
proto.casper.BodyProto.prototype.cleardpsList = function() {
  return this.setdpsList([]);
};


/**
 * repeated ProcessedSystemdpProto systemdps = 3;
 * @return {!Array<!proto.casper.ProcessedSystemdpProto>}
 */
proto.casper.BodyProto.prototype.fetchSystemdpsList = function() {
  return /** @type{!Array<!proto.casper.ProcessedSystemdpProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.ProcessedSystemdpProto, 3));
};


/**
 * @param {!Array<!proto.casper.ProcessedSystemdpProto>} value
 * @return {!proto.casper.BodyProto} returns this
*/
proto.casper.BodyProto.prototype.setSystemdpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.casper.ProcessedSystemdpProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.ProcessedSystemdpProto}
 */
proto.casper.BodyProto.prototype.addSystemdps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.casper.ProcessedSystemdpProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BodyProto} returns this
 */
proto.casper.BodyProto.prototype.clearSystemdpsList = function() {
  return this.setSystemdpsList([]);
};


/**
 * optional bytes extraBytes = 4;
 * @return {string}
 */
proto.casper.BodyProto.prototype.fetchExtrabytes = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes extraBytes = 4;
 * This is a type-conversion wrapper around `fetchExtrabytes()`
 * @return {string}
 */
proto.casper.BodyProto.prototype.fetchExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchExtrabytes()));
};


/**
 * optional bytes extraBytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchExtrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.BodyProto.prototype.fetchExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchExtrabytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BodyProto} returns this
 */
proto.casper.BodyProto.prototype.setExtrabytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated RejecteddpProto rejecteddps = 5;
 * @return {!Array<!proto.casper.RejecteddpProto>}
 */
proto.casper.BodyProto.prototype.fetchRejecteddpsList = function() {
  return /** @type{!Array<!proto.casper.RejecteddpProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.RejecteddpProto, 5));
};


/**
 * @param {!Array<!proto.casper.RejecteddpProto>} value
 * @return {!proto.casper.BodyProto} returns this
*/
proto.casper.BodyProto.prototype.setRejecteddpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.casper.RejecteddpProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.RejecteddpProto}
 */
proto.casper.BodyProto.prototype.addRejecteddps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.casper.RejecteddpProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.BodyProto} returns this
 */
proto.casper.BodyProto.prototype.clearRejecteddpsList = function() {
  return this.setRejecteddpsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.RejecteddpProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.RejecteddpProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.RejecteddpProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.RejecteddpProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    sig: msg.fetchSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.RejecteddpProto}
 */
proto.casper.RejecteddpProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.RejecteddpProto;
  return proto.casper.RejecteddpProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.RejecteddpProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.RejecteddpProto}
 */
proto.casper.RejecteddpProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.RejecteddpProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.RejecteddpProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.RejecteddpProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.RejecteddpProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes sig = 1;
 * @return {string}
 */
proto.casper.RejecteddpProto.prototype.fetchSig = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sig = 1;
 * This is a type-conversion wrapper around `fetchSig()`
 * @return {string}
 */
proto.casper.RejecteddpProto.prototype.fetchSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchSig()));
};


/**
 * optional bytes sig = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchSig()`
 * @return {!Uint8Array}
 */
proto.casper.RejecteddpProto.prototype.fetchSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.RejecteddpProto} returns this
 */
proto.casper.RejecteddpProto.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.JustificationProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.JustificationProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.JustificationProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.JustificationProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: msg.fetchValidator_asB64(),
    latestblockhash: msg.fetchLatestblockhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.JustificationProto}
 */
proto.casper.JustificationProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.JustificationProto;
  return proto.casper.JustificationProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.JustificationProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.JustificationProto}
 */
proto.casper.JustificationProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLatestblockhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.JustificationProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.JustificationProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.JustificationProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.JustificationProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchValidator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchLatestblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes validator = 1;
 * @return {string}
 */
proto.casper.JustificationProto.prototype.fetchValidator = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes validator = 1;
 * This is a type-conversion wrapper around `fetchValidator()`
 * @return {string}
 */
proto.casper.JustificationProto.prototype.fetchValidator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchValidator()));
};


/**
 * optional bytes validator = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchValidator()`
 * @return {!Uint8Array}
 */
proto.casper.JustificationProto.prototype.fetchValidator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchValidator()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.JustificationProto} returns this
 */
proto.casper.JustificationProto.prototype.setValidator = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes latestBlockHash = 2;
 * @return {string}
 */
proto.casper.JustificationProto.prototype.fetchLatestblockhash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes latestBlockHash = 2;
 * This is a type-conversion wrapper around `fetchLatestblockhash()`
 * @return {string}
 */
proto.casper.JustificationProto.prototype.fetchLatestblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchLatestblockhash()));
};


/**
 * optional bytes latestBlockHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchLatestblockhash()`
 * @return {!Uint8Array}
 */
proto.casper.JustificationProto.prototype.fetchLatestblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchLatestblockhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.JustificationProto} returns this
 */
proto.casper.JustificationProto.prototype.setLatestblockhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.RChainStateProto.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.RChainStateProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.RChainStateProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.RChainStateProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.RChainStateProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    prestatehash: msg.fetchPrestatehash_asB64(),
    poststatehash: msg.fetchPoststatehash_asB64(),
    bondsList: jspb.Message.toObjectList(msg.fetchBondsList(),
    proto.casper.BondProto.toObject, includeInstance),
    blocknumber: jspb.Message.fetchFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.RChainStateProto}
 */
proto.casper.RChainStateProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.RChainStateProto;
  return proto.casper.RChainStateProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.RChainStateProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.RChainStateProto}
 */
proto.casper.RChainStateProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrestatehash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPoststatehash(value);
      break;
    case 3:
      var value = new proto.casper.BondProto;
      reader.readMessage(value,proto.casper.BondProto.deserializeBinaryFromReader);
      msg.addBonds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.RChainStateProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.RChainStateProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.RChainStateProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.RChainStateProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchPrestatehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchPoststatehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.fetchBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.casper.BondProto.serializeBinaryToWriter
    );
  }
  f = message.fetchBlocknumber();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional bytes preStateHash = 1;
 * @return {string}
 */
proto.casper.RChainStateProto.prototype.fetchPrestatehash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes preStateHash = 1;
 * This is a type-conversion wrapper around `fetchPrestatehash()`
 * @return {string}
 */
proto.casper.RChainStateProto.prototype.fetchPrestatehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchPrestatehash()));
};


/**
 * optional bytes preStateHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchPrestatehash()`
 * @return {!Uint8Array}
 */
proto.casper.RChainStateProto.prototype.fetchPrestatehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchPrestatehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.RChainStateProto} returns this
 */
proto.casper.RChainStateProto.prototype.setPrestatehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes postStateHash = 2;
 * @return {string}
 */
proto.casper.RChainStateProto.prototype.fetchPoststatehash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes postStateHash = 2;
 * This is a type-conversion wrapper around `fetchPoststatehash()`
 * @return {string}
 */
proto.casper.RChainStateProto.prototype.fetchPoststatehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchPoststatehash()));
};


/**
 * optional bytes postStateHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchPoststatehash()`
 * @return {!Uint8Array}
 */
proto.casper.RChainStateProto.prototype.fetchPoststatehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchPoststatehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.RChainStateProto} returns this
 */
proto.casper.RChainStateProto.prototype.setPoststatehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated BondProto bonds = 3;
 * @return {!Array<!proto.casper.BondProto>}
 */
proto.casper.RChainStateProto.prototype.fetchBondsList = function() {
  return /** @type{!Array<!proto.casper.BondProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.BondProto, 3));
};


/**
 * @param {!Array<!proto.casper.BondProto>} value
 * @return {!proto.casper.RChainStateProto} returns this
*/
proto.casper.RChainStateProto.prototype.setBondsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.casper.BondProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.BondProto}
 */
proto.casper.RChainStateProto.prototype.addBonds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.casper.BondProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.RChainStateProto} returns this
 */
proto.casper.RChainStateProto.prototype.clearBondsList = function() {
  return this.setBondsList([]);
};


/**
 * optional int64 blockNumber = 4;
 * @return {number}
 */
proto.casper.RChainStateProto.prototype.fetchBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.RChainStateProto} returns this
 */
proto.casper.RChainStateProto.prototype.setBlocknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.casper.EventProto.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.casper.EventProto.EventInstanceCase = {
  EVENT_INSTANCE_NOT_SET: 0,
  PRODUCE: 1,
  CONSUME: 2,
  COMM: 3
};

/**
 * @return {proto.casper.EventProto.EventInstanceCase}
 */
proto.casper.EventProto.prototype.fetchEventInstanceCase = function() {
  return /** @type {proto.casper.EventProto.EventInstanceCase} */(jspb.Message.computeOneofCase(this, proto.casper.EventProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.EventProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.EventProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.EventProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.EventProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    produce: (f = msg.fetchProduce()) && proto.casper.ProduceEventProto.toObject(includeInstance, f),
    consume: (f = msg.fetchConsume()) && proto.casper.ConsumeEventProto.toObject(includeInstance, f),
    comm: (f = msg.fetchComm()) && proto.casper.CommEventProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.EventProto}
 */
proto.casper.EventProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.EventProto;
  return proto.casper.EventProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.EventProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.EventProto}
 */
proto.casper.EventProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ProduceEventProto;
      reader.readMessage(value,proto.casper.ProduceEventProto.deserializeBinaryFromReader);
      msg.setProduce(value);
      break;
    case 2:
      var value = new proto.casper.ConsumeEventProto;
      reader.readMessage(value,proto.casper.ConsumeEventProto.deserializeBinaryFromReader);
      msg.setConsume(value);
      break;
    case 3:
      var value = new proto.casper.CommEventProto;
      reader.readMessage(value,proto.casper.CommEventProto.deserializeBinaryFromReader);
      msg.setComm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.EventProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.EventProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.EventProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.EventProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchProduce();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ProduceEventProto.serializeBinaryToWriter
    );
  }
  f = message.fetchConsume();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.ConsumeEventProto.serializeBinaryToWriter
    );
  }
  f = message.fetchComm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.casper.CommEventProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProduceEventProto produce = 1;
 * @return {?proto.casper.ProduceEventProto}
 */
proto.casper.EventProto.prototype.fetchProduce = function() {
  return /** @type{?proto.casper.ProduceEventProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ProduceEventProto, 1));
};


/**
 * @param {?proto.casper.ProduceEventProto|undefined} value
 * @return {!proto.casper.EventProto} returns this
*/
proto.casper.EventProto.prototype.setProduce = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.casper.EventProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.EventProto} returns this
 */
proto.casper.EventProto.prototype.clearProduce = function() {
  return this.setProduce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.EventProto.prototype.hasProduce = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * optional ConsumeEventProto consume = 2;
 * @return {?proto.casper.ConsumeEventProto}
 */
proto.casper.EventProto.prototype.fetchConsume = function() {
  return /** @type{?proto.casper.ConsumeEventProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ConsumeEventProto, 2));
};


/**
 * @param {?proto.casper.ConsumeEventProto|undefined} value
 * @return {!proto.casper.EventProto} returns this
*/
proto.casper.EventProto.prototype.setConsume = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.casper.EventProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.EventProto} returns this
 */
proto.casper.EventProto.prototype.clearConsume = function() {
  return this.setConsume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.EventProto.prototype.hasConsume = function() {
  return jspb.Message.fetchField(this, 2) != null;
};


/**
 * optional CommEventProto comm = 3;
 * @return {?proto.casper.CommEventProto}
 */
proto.casper.EventProto.prototype.fetchComm = function() {
  return /** @type{?proto.casper.CommEventProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.CommEventProto, 3));
};


/**
 * @param {?proto.casper.CommEventProto|undefined} value
 * @return {!proto.casper.EventProto} returns this
*/
proto.casper.EventProto.prototype.setComm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.casper.EventProto.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.EventProto} returns this
 */
proto.casper.EventProto.prototype.clearComm = function() {
  return this.setComm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.EventProto.prototype.hasComm = function() {
  return jspb.Message.fetchField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ProduceEventProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ProduceEventProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ProduceEventProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProduceEventProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelshash: msg.fetchChannelshash_asB64(),
    hash: msg.fetchHash_asB64(),
    persistent: jspb.Message.fetchBooleanFieldWithDefault(msg, 3, false),
    timesrepeated: jspb.Message.fetchFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ProduceEventProto}
 */
proto.casper.ProduceEventProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ProduceEventProto;
  return proto.casper.ProduceEventProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ProduceEventProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ProduceEventProto}
 */
proto.casper.ProduceEventProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelshash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimesrepeated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ProduceEventProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ProduceEventProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ProduceEventProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProduceEventProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchChannelshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.fetchPersistent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.fetchTimesrepeated();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes channelsHash = 1;
 * @return {string}
 */
proto.casper.ProduceEventProto.prototype.fetchChannelshash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channelsHash = 1;
 * This is a type-conversion wrapper around `fetchChannelshash()`
 * @return {string}
 */
proto.casper.ProduceEventProto.prototype.fetchChannelshash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchChannelshash()));
};


/**
 * optional bytes channelsHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchChannelshash()`
 * @return {!Uint8Array}
 */
proto.casper.ProduceEventProto.prototype.fetchChannelshash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchChannelshash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.ProduceEventProto} returns this
 */
proto.casper.ProduceEventProto.prototype.setChannelshash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {string}
 */
proto.casper.ProduceEventProto.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {string}
 */
proto.casper.ProduceEventProto.prototype.fetchHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {!Uint8Array}
 */
proto.casper.ProduceEventProto.prototype.fetchHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.ProduceEventProto} returns this
 */
proto.casper.ProduceEventProto.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool persistent = 3;
 * @return {boolean}
 */
proto.casper.ProduceEventProto.prototype.fetchPersistent = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.ProduceEventProto} returns this
 */
proto.casper.ProduceEventProto.prototype.setPersistent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 timesRepeated = 4;
 * @return {number}
 */
proto.casper.ProduceEventProto.prototype.fetchTimesrepeated = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.ProduceEventProto} returns this
 */
proto.casper.ProduceEventProto.prototype.setTimesrepeated = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ConsumeEventProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ConsumeEventProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ConsumeEventProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ConsumeEventProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ConsumeEventProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelshashesList: msg.fetchChannelshashesList_asB64(),
    hash: msg.fetchHash_asB64(),
    persistent: jspb.Message.fetchBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ConsumeEventProto}
 */
proto.casper.ConsumeEventProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ConsumeEventProto;
  return proto.casper.ConsumeEventProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ConsumeEventProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ConsumeEventProto}
 */
proto.casper.ConsumeEventProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addChannelshashes(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ConsumeEventProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ConsumeEventProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ConsumeEventProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ConsumeEventProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchChannelshashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.fetchHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.fetchPersistent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated bytes channelsHashes = 1;
 * @return {!Array<string>}
 */
proto.casper.ConsumeEventProto.prototype.fetchChannelshashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.fetchRepeatedField(this, 1));
};


/**
 * repeated bytes channelsHashes = 1;
 * This is a type-conversion wrapper around `fetchChannelshashesList()`
 * @return {!Array<string>}
 */
proto.casper.ConsumeEventProto.prototype.fetchChannelshashesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.fetchChannelshashesList()));
};


/**
 * repeated bytes channelsHashes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchChannelshashesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.casper.ConsumeEventProto.prototype.fetchChannelshashesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.fetchChannelshashesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.casper.ConsumeEventProto} returns this
 */
proto.casper.ConsumeEventProto.prototype.setChannelshashesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.casper.ConsumeEventProto} returns this
 */
proto.casper.ConsumeEventProto.prototype.addChannelshashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.ConsumeEventProto} returns this
 */
proto.casper.ConsumeEventProto.prototype.clearChannelshashesList = function() {
  return this.setChannelshashesList([]);
};


/**
 * optional bytes hash = 2;
 * @return {string}
 */
proto.casper.ConsumeEventProto.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {string}
 */
proto.casper.ConsumeEventProto.prototype.fetchHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {!Uint8Array}
 */
proto.casper.ConsumeEventProto.prototype.fetchHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.ConsumeEventProto} returns this
 */
proto.casper.ConsumeEventProto.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool persistent = 3;
 * @return {boolean}
 */
proto.casper.ConsumeEventProto.prototype.fetchPersistent = function() {
  return /** @type {boolean} */ (jspb.Message.fetchBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.casper.ConsumeEventProto} returns this
 */
proto.casper.ConsumeEventProto.prototype.setPersistent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.CommEventProto.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.CommEventProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.CommEventProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.CommEventProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.CommEventProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    consume: (f = msg.fetchConsume()) && proto.casper.ConsumeEventProto.toObject(includeInstance, f),
    producesList: jspb.Message.toObjectList(msg.fetchProducesList(),
    proto.casper.ProduceEventProto.toObject, includeInstance),
    peeksList: jspb.Message.toObjectList(msg.fetchPeeksList(),
    proto.casper.PeekProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.CommEventProto}
 */
proto.casper.CommEventProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.CommEventProto;
  return proto.casper.CommEventProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.CommEventProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.CommEventProto}
 */
proto.casper.CommEventProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ConsumeEventProto;
      reader.readMessage(value,proto.casper.ConsumeEventProto.deserializeBinaryFromReader);
      msg.setConsume(value);
      break;
    case 2:
      var value = new proto.casper.ProduceEventProto;
      reader.readMessage(value,proto.casper.ProduceEventProto.deserializeBinaryFromReader);
      msg.addProduces(value);
      break;
    case 3:
      var value = new proto.casper.PeekProto;
      reader.readMessage(value,proto.casper.PeekProto.deserializeBinaryFromReader);
      msg.addPeeks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.CommEventProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.CommEventProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.CommEventProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.CommEventProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchConsume();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ConsumeEventProto.serializeBinaryToWriter
    );
  }
  f = message.fetchProducesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.ProduceEventProto.serializeBinaryToWriter
    );
  }
  f = message.fetchPeeksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.casper.PeekProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConsumeEventProto consume = 1;
 * @return {?proto.casper.ConsumeEventProto}
 */
proto.casper.CommEventProto.prototype.fetchConsume = function() {
  return /** @type{?proto.casper.ConsumeEventProto} */ (
    jspb.Message.fetchWrapperField(this, proto.casper.ConsumeEventProto, 1));
};


/**
 * @param {?proto.casper.ConsumeEventProto|undefined} value
 * @return {!proto.casper.CommEventProto} returns this
*/
proto.casper.CommEventProto.prototype.setConsume = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.casper.CommEventProto} returns this
 */
proto.casper.CommEventProto.prototype.clearConsume = function() {
  return this.setConsume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.CommEventProto.prototype.hasConsume = function() {
  return jspb.Message.fetchField(this, 1) != null;
};


/**
 * repeated ProduceEventProto produces = 2;
 * @return {!Array<!proto.casper.ProduceEventProto>}
 */
proto.casper.CommEventProto.prototype.fetchProducesList = function() {
  return /** @type{!Array<!proto.casper.ProduceEventProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.ProduceEventProto, 2));
};


/**
 * @param {!Array<!proto.casper.ProduceEventProto>} value
 * @return {!proto.casper.CommEventProto} returns this
*/
proto.casper.CommEventProto.prototype.setProducesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.ProduceEventProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.ProduceEventProto}
 */
proto.casper.CommEventProto.prototype.addProduces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.ProduceEventProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.CommEventProto} returns this
 */
proto.casper.CommEventProto.prototype.clearProducesList = function() {
  return this.setProducesList([]);
};


/**
 * repeated PeekProto peeks = 3;
 * @return {!Array<!proto.casper.PeekProto>}
 */
proto.casper.CommEventProto.prototype.fetchPeeksList = function() {
  return /** @type{!Array<!proto.casper.PeekProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.PeekProto, 3));
};


/**
 * @param {!Array<!proto.casper.PeekProto>} value
 * @return {!proto.casper.CommEventProto} returns this
*/
proto.casper.CommEventProto.prototype.setPeeksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.casper.PeekProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.PeekProto}
 */
proto.casper.CommEventProto.prototype.addPeeks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.casper.PeekProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.CommEventProto} returns this
 */
proto.casper.CommEventProto.prototype.clearPeeksList = function() {
  return this.setPeeksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.PeekProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.PeekProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.PeekProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.PeekProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelindex: jspb.Message.fetchFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.PeekProto}
 */
proto.casper.PeekProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.PeekProto;
  return proto.casper.PeekProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.PeekProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.PeekProto}
 */
proto.casper.PeekProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.PeekProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.PeekProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.PeekProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.PeekProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchChannelindex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 channelIndex = 1;
 * @return {number}
 */
proto.casper.PeekProto.prototype.fetchChannelindex = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.PeekProto} returns this
 */
proto.casper.PeekProto.prototype.setChannelindex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BondProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BondProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BondProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: msg.fetchValidator_asB64(),
    stake: jspb.Message.fetchFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BondProto}
 */
proto.casper.BondProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BondProto;
  return proto.casper.BondProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BondProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BondProto}
 */
proto.casper.BondProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BondProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BondProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BondProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchValidator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchStake();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes validator = 1;
 * @return {string}
 */
proto.casper.BondProto.prototype.fetchValidator = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes validator = 1;
 * This is a type-conversion wrapper around `fetchValidator()`
 * @return {string}
 */
proto.casper.BondProto.prototype.fetchValidator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchValidator()));
};


/**
 * optional bytes validator = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchValidator()`
 * @return {!Uint8Array}
 */
proto.casper.BondProto.prototype.fetchValidator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchValidator()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.BondProto} returns this
 */
proto.casper.BondProto.prototype.setValidator = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 stake = 2;
 * @return {number}
 */
proto.casper.BondProto.prototype.fetchStake = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.BondProto} returns this
 */
proto.casper.BondProto.prototype.setStake = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.StoreNodeKeyProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.StoreNodeKeyProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.StoreNodeKeyProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.StoreNodeKeyProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.fetchHash_asB64(),
    index: jspb.Message.fetchFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.StoreNodeKeyProto}
 */
proto.casper.StoreNodeKeyProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.StoreNodeKeyProto;
  return proto.casper.StoreNodeKeyProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.StoreNodeKeyProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.StoreNodeKeyProto}
 */
proto.casper.StoreNodeKeyProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.StoreNodeKeyProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.StoreNodeKeyProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.StoreNodeKeyProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.StoreNodeKeyProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.casper.StoreNodeKeyProto.prototype.fetchHash = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {string}
 */
proto.casper.StoreNodeKeyProto.prototype.fetchHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchHash()`
 * @return {!Uint8Array}
 */
proto.casper.StoreNodeKeyProto.prototype.fetchHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.StoreNodeKeyProto} returns this
 */
proto.casper.StoreNodeKeyProto.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.casper.StoreNodeKeyProto.prototype.fetchIndex = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.StoreNodeKeyProto} returns this
 */
proto.casper.StoreNodeKeyProto.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.StoreItemsMessageRequestProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.StoreItemsMessageRequestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.StoreItemsMessageRequestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.StoreItemsMessageRequestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.StoreItemsMessageRequestProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    startpathList: jspb.Message.toObjectList(msg.fetchStartpathList(),
    proto.casper.StoreNodeKeyProto.toObject, includeInstance),
    skip: jspb.Message.fetchFieldWithDefault(msg, 2, 0),
    take: jspb.Message.fetchFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.StoreItemsMessageRequestProto}
 */
proto.casper.StoreItemsMessageRequestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.StoreItemsMessageRequestProto;
  return proto.casper.StoreItemsMessageRequestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.StoreItemsMessageRequestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.StoreItemsMessageRequestProto}
 */
proto.casper.StoreItemsMessageRequestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.StoreNodeKeyProto;
      reader.readMessage(value,proto.casper.StoreNodeKeyProto.deserializeBinaryFromReader);
      msg.addStartpath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkip(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.StoreItemsMessageRequestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.StoreItemsMessageRequestProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.StoreItemsMessageRequestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.StoreItemsMessageRequestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchStartpathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.casper.StoreNodeKeyProto.serializeBinaryToWriter
    );
  }
  f = message.fetchSkip();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.fetchTake();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated StoreNodeKeyProto startPath = 1;
 * @return {!Array<!proto.casper.StoreNodeKeyProto>}
 */
proto.casper.StoreItemsMessageRequestProto.prototype.fetchStartpathList = function() {
  return /** @type{!Array<!proto.casper.StoreNodeKeyProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.StoreNodeKeyProto, 1));
};


/**
 * @param {!Array<!proto.casper.StoreNodeKeyProto>} value
 * @return {!proto.casper.StoreItemsMessageRequestProto} returns this
*/
proto.casper.StoreItemsMessageRequestProto.prototype.setStartpathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.casper.StoreNodeKeyProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.StoreNodeKeyProto}
 */
proto.casper.StoreItemsMessageRequestProto.prototype.addStartpath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.casper.StoreNodeKeyProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.StoreItemsMessageRequestProto} returns this
 */
proto.casper.StoreItemsMessageRequestProto.prototype.clearStartpathList = function() {
  return this.setStartpathList([]);
};


/**
 * optional int32 skip = 2;
 * @return {number}
 */
proto.casper.StoreItemsMessageRequestProto.prototype.fetchSkip = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.StoreItemsMessageRequestProto} returns this
 */
proto.casper.StoreItemsMessageRequestProto.prototype.setSkip = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 take = 3;
 * @return {number}
 */
proto.casper.StoreItemsMessageRequestProto.prototype.fetchTake = function() {
  return /** @type {number} */ (jspb.Message.fetchFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.casper.StoreItemsMessageRequestProto} returns this
 */
proto.casper.StoreItemsMessageRequestProto.prototype.setTake = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.StoreItemProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.StoreItemProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.StoreItemProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.StoreItemProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.fetchKey_asB64(),
    value: msg.fetchValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.StoreItemProto}
 */
proto.casper.StoreItemProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.StoreItemProto;
  return proto.casper.StoreItemProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.StoreItemProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.StoreItemProto}
 */
proto.casper.StoreItemProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.StoreItemProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.StoreItemProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.StoreItemProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.StoreItemProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.fetchValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {string}
 */
proto.casper.StoreItemProto.prototype.fetchKey = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `fetchKey()`
 * @return {string}
 */
proto.casper.StoreItemProto.prototype.fetchKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchKey()`
 * @return {!Uint8Array}
 */
proto.casper.StoreItemProto.prototype.fetchKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.StoreItemProto} returns this
 */
proto.casper.StoreItemProto.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {string}
 */
proto.casper.StoreItemProto.prototype.fetchValue = function() {
  return /** @type {string} */ (jspb.Message.fetchFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `fetchValue()`
 * @return {string}
 */
proto.casper.StoreItemProto.prototype.fetchValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.fetchValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `fetchValue()`
 * @return {!Uint8Array}
 */
proto.casper.StoreItemProto.prototype.fetchValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.fetchValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.casper.StoreItemProto} returns this
 */
proto.casper.StoreItemProto.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.StoreItemsMessageProto.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.StoreItemsMessageProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.StoreItemsMessageProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.StoreItemsMessageProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.StoreItemsMessageProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    startpathList: jspb.Message.toObjectList(msg.fetchStartpathList(),
    proto.casper.StoreNodeKeyProto.toObject, includeInstance),
    lastpathList: jspb.Message.toObjectList(msg.fetchLastpathList(),
    proto.casper.StoreNodeKeyProto.toObject, includeInstance),
    historyitemsList: jspb.Message.toObjectList(msg.fetchHistoryitemsList(),
    proto.casper.StoreItemProto.toObject, includeInstance),
    dataitemsList: jspb.Message.toObjectList(msg.fetchDataitemsList(),
    proto.casper.StoreItemProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.StoreItemsMessageProto}
 */
proto.casper.StoreItemsMessageProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.StoreItemsMessageProto;
  return proto.casper.StoreItemsMessageProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.StoreItemsMessageProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.StoreItemsMessageProto}
 */
proto.casper.StoreItemsMessageProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.fetchFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.StoreNodeKeyProto;
      reader.readMessage(value,proto.casper.StoreNodeKeyProto.deserializeBinaryFromReader);
      msg.addStartpath(value);
      break;
    case 2:
      var value = new proto.casper.StoreNodeKeyProto;
      reader.readMessage(value,proto.casper.StoreNodeKeyProto.deserializeBinaryFromReader);
      msg.addLastpath(value);
      break;
    case 3:
      var value = new proto.casper.StoreItemProto;
      reader.readMessage(value,proto.casper.StoreItemProto.deserializeBinaryFromReader);
      msg.addHistoryitems(value);
      break;
    case 4:
      var value = new proto.casper.StoreItemProto;
      reader.readMessage(value,proto.casper.StoreItemProto.deserializeBinaryFromReader);
      msg.addDataitems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.StoreItemsMessageProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.StoreItemsMessageProto.serializeBinaryToWriter(this, writer);
  return writer.fetchResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.StoreItemsMessageProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.StoreItemsMessageProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.fetchStartpathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.casper.StoreNodeKeyProto.serializeBinaryToWriter
    );
  }
  f = message.fetchLastpathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.StoreNodeKeyProto.serializeBinaryToWriter
    );
  }
  f = message.fetchHistoryitemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.casper.StoreItemProto.serializeBinaryToWriter
    );
  }
  f = message.fetchDataitemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.casper.StoreItemProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StoreNodeKeyProto startPath = 1;
 * @return {!Array<!proto.casper.StoreNodeKeyProto>}
 */
proto.casper.StoreItemsMessageProto.prototype.fetchStartpathList = function() {
  return /** @type{!Array<!proto.casper.StoreNodeKeyProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.StoreNodeKeyProto, 1));
};


/**
 * @param {!Array<!proto.casper.StoreNodeKeyProto>} value
 * @return {!proto.casper.StoreItemsMessageProto} returns this
*/
proto.casper.StoreItemsMessageProto.prototype.setStartpathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.casper.StoreNodeKeyProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.StoreNodeKeyProto}
 */
proto.casper.StoreItemsMessageProto.prototype.addStartpath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.casper.StoreNodeKeyProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.StoreItemsMessageProto} returns this
 */
proto.casper.StoreItemsMessageProto.prototype.clearStartpathList = function() {
  return this.setStartpathList([]);
};


/**
 * repeated StoreNodeKeyProto lastPath = 2;
 * @return {!Array<!proto.casper.StoreNodeKeyProto>}
 */
proto.casper.StoreItemsMessageProto.prototype.fetchLastpathList = function() {
  return /** @type{!Array<!proto.casper.StoreNodeKeyProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.StoreNodeKeyProto, 2));
};


/**
 * @param {!Array<!proto.casper.StoreNodeKeyProto>} value
 * @return {!proto.casper.StoreItemsMessageProto} returns this
*/
proto.casper.StoreItemsMessageProto.prototype.setLastpathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.StoreNodeKeyProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.StoreNodeKeyProto}
 */
proto.casper.StoreItemsMessageProto.prototype.addLastpath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.StoreNodeKeyProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.StoreItemsMessageProto} returns this
 */
proto.casper.StoreItemsMessageProto.prototype.clearLastpathList = function() {
  return this.setLastpathList([]);
};


/**
 * repeated StoreItemProto historyItems = 3;
 * @return {!Array<!proto.casper.StoreItemProto>}
 */
proto.casper.StoreItemsMessageProto.prototype.fetchHistoryitemsList = function() {
  return /** @type{!Array<!proto.casper.StoreItemProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.StoreItemProto, 3));
};


/**
 * @param {!Array<!proto.casper.StoreItemProto>} value
 * @return {!proto.casper.StoreItemsMessageProto} returns this
*/
proto.casper.StoreItemsMessageProto.prototype.setHistoryitemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.casper.StoreItemProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.StoreItemProto}
 */
proto.casper.StoreItemsMessageProto.prototype.addHistoryitems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.casper.StoreItemProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.StoreItemsMessageProto} returns this
 */
proto.casper.StoreItemsMessageProto.prototype.clearHistoryitemsList = function() {
  return this.setHistoryitemsList([]);
};


/**
 * repeated StoreItemProto dataItems = 4;
 * @return {!Array<!proto.casper.StoreItemProto>}
 */
proto.casper.StoreItemsMessageProto.prototype.fetchDataitemsList = function() {
  return /** @type{!Array<!proto.casper.StoreItemProto>} */ (
    jspb.Message.fetchRepeatedWrapperField(this, proto.casper.StoreItemProto, 4));
};


/**
 * @param {!Array<!proto.casper.StoreItemProto>} value
 * @return {!proto.casper.StoreItemsMessageProto} returns this
*/
proto.casper.StoreItemsMessageProto.prototype.setDataitemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.casper.StoreItemProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.StoreItemProto}
 */
proto.casper.StoreItemsMessageProto.prototype.addDataitems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.casper.StoreItemProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.casper.StoreItemsMessageProto} returns this
 */
proto.casper.StoreItemsMessageProto.prototype.clearDataitemsList = function() {
  return this.setDataitemsList([]);
};


goog.object.extend(exports, proto.casper);
